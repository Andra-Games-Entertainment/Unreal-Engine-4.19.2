Availability:Public
Title: Animation Blueprints
Crumbs: %ROOT%, Engine, Engine/Animation
Description:Animation Blueprints are visual scripts created in Persona that allow for the creation and control of complex animation behaviors.
Related: Engine/Blueprints/Overview
Related: Engine/Content/FBX/Animations
Related: Engine/Content/Types/SkeletalMeshes
Related: Engine/Animation/PhysicallyDrivenAnimation
Related: Engine/Animation/StateMachines
Related: Gameplay/AI
Related: Engine/Content/Tools/MayaRiggingTool
version: 4.14
type:landing
topic-image:animbptopic.png
tags:Animation
tags:Animation Blueprint
tags:Blueprints
tags:State Machine

[REGION:banner]
![](AnimationBlueprint.png)
[/REGION]


[EXCERPT:Intro]
An **Animation Blueprint** is essentially a specialized [Blueprint](Engine/Blueprints) whose graphs control the animation of a [Skeletal Mesh.](Engine/Content/Types/SkeletalMeshes) 
Graphs are edited inside the **Animation Blueprint Editor** where you can perform blending of animations, directly control the bones of a Skeleton, or set up logic that will ultimately define the final animation pose for a Skeletal Mesh to use each frame. 
[/EXCERPT:Intro]

[REGION:note]
An example of an **Animation Blueprint** is demonstrated on the [Animation Content Examples](Resources\ContentExamples\Animation) page under section 1.2.
[/REGION]

## Creating & Navigating Animation Blueprints

Before jumping into how Animation Blueprints work, it's best to understand how to create them and start to familiarize yourself with the Animation Blueprint Interface. 

[REGION:topics half]
%Engine\Animation\AnimBlueprints\Creation:TopicCompact%
%Engine\Animation\AnimBlueprints\Interface:TopicCompact%
[/REGION]

## Working with Animation Blueprints

Once you have created your Animation Blueprint and can navigate the UI, it's time to consider which aspect you want to work on first.

[EXCERPT:Graphs]
There are two main components in an Animation Blueprint that work in conjunction to create the final animation 
for each frame. The **EventGraph** can perform updates to values which can then be used in the **AnimGraph** 
to drive State Machines, BlendSpaces, or other nodes allowing blending between multiple AnimationSequences or poses 
that can fire off notifications to other systems to enable dynamic animation-driven effects to occur.
[/EXCERPT:Graphs]

[REGION:topics half]
%Engine\Animation\AnimBlueprints\EventGraph:TopicCompact%
%Engine\Animation\AnimBlueprints\AnimGraph:TopicCompact%
[/REGION]


## Working with Sub Animation Blueprint Instances

When creating Animation Blueprints for various characters, it is not uncommon to share animation logic between those characters. 
For example, suppose you have physical animation or [AnimDynamics](Engine\Animation\AnimHowTo\AnimDynamics) applied to one character and you want to apply it to another. 
With the **Sub Anim Instance** node, you can create a reference to a separate Animation Blueprint to access and include all of its logic within another Animation Blueprint (sort of like a function call). 

This can be used to break up large Animation Blueprints into separate, smaller Animation Blueprints, that can be included within other Animation Blueprints. 
For example, you could have one Animation Blueprint for purely "Locomotion" and a Sub Anim Instance that handles any physics-based animation. 
Member variables of a Sub Animation Blueprint can also be exposed as input pins inside their parent Animation Blueprint and **Sub-Graph Input** nodes can be used to expose **In Poses** on the Sub Anim Instance (shown below).

![](SubAnimInstance.png)

[REGION:warning]
When working with Sub Anim Instances, they must use the same Skeleton as the outer Animation Blueprint it resides in.
[/REGION]

[REGION:note]
See [Using Sub Anim Instances](https://docs.unrealengine.com/latest/INT/Engine/Animation/AnimHowTo/SubAnimInstance/index.html) for an example walk-through of setting up a Sub Animation Blueprint Instance to affect a character's movement. 
[/REGION]


## Working with Child Animation Blueprints

Also when creating and setting up your characters and Animation Blueprints, there may be instances where you have multiple characters that are similar but have entirely different animations for different states. Rather than create Animation Blueprints for each of those characters, you may be able to use a **Child Animation Blueprint** of a pre-existing Animation Blueprint and override the animation assets that you want to replace. The Child Animation Blueprint will inherit everything from the parent, but it will also allow you to specify which animations to override via the **Asset Override Editor**. 

For example, suppose you have two humanoid type characters where one is a human and another is a werewolf. Both characters can walk, run, jump, crawl, etc. However, their motions may be entirely different. The logic of moving between those motions is the same, but the motions themselves are different. It's perfectly fine to create two different Animation Blueprints but to save some time. you can create a Child Animation Blueprint and selectively choose which animations to override. 

[REGION:note]
See [Animation Blueprint Override](Engine/Animation/AnimHowTo/AnimBPOverride) for an example walk-through of creating and overriding an Animation Blueprint with a Child Animation Blueprint.
[/REGION]





