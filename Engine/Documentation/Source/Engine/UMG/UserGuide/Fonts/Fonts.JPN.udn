INTSourceChangelist:3361457
Availability:Public
Title:フォント
Crumbs:%ROOT%, Engine, Engine/UMG, Engine/UMG/UserGuide
Description:フォントのインポート、フォント エディタでの作業、および UMG でフォントを使用するプロセスの詳細を説明します。 
Parent:Engine/UMG
Related:Engine/UMG
Related:Engine/UMG/UserGuide/WidgetBlueprints
Related:Engine/UMG/UserGuide/WidgetTypeReference
Version:4.15
tags:UMG UI Designer

[TOC(start:2 end:2)]

このページでは、独自のフォントのインポート、 **フォント エディタ** の使用、および **Unreal Motion Graphics (UMG) UI デザイナ** のフォントについて説明します。 

## Font アセット

UE4 のフォントは **Font** アセットとして分類され、 2 種類のキャッシング方法を使用します。**ランタイム** は、コンポジット フォントの形式をとります。**オフライン** は、
事前計算された古いフォント アトラス方式です。フォント エディタで Font アセットを開くことで、この 2 つの方式を切り替えることができます (これは古い方式の既存のフォント アセットを置き換える必要なく
新しいコンポジット方式に変換する簡単な方法です)。 

## Font Face アセット

**Font Face** アセットは、フォント インポート時に作成され、Font アセットが参照できるフォント データを保存します。つまり、同じフォント データを複数のフォント アセットで再利用することができます。 
さらに、ひとつの Font アセット内で複数の書体を再利用することもできます。その結果、メモリ消費を減らします。 

![](FontFaceWindow.png)(w:400)

Font Face エディタ ウィンドウから、**[Hinting]** と **[Loading Policy]** の設定にアクセスすることができます。

[REGION:simpletable]
| プロパティ | 説明 |
| --- |--- |
| Source File Name | 書体の作成元のファイル名です。必ずしもディスク上にありません。フォント データを過去にロードして、このアセット内にキャッシュしたかもしれないからです。 |
| Hinting | 書体と合わせて使うヒント アルゴリズムです。 [INCLUDE:#hinting] |
| Loading Policy | ランタイムにこうした書体がどのようにロードされるかを制御する列挙型変数です。オプションの詳細説明については、列挙型変数をご覧ください。 [INCLUDE:#loadingpolicy]|
[/REGION]

<!---
[EXCERPT:hinting]
[REGION:simpletable]
| 選択 | 説明  |
| --- | --- |
| Default | フォントで指定されているデフォルトのフォントを使用します。 |
| Auto | 自動ヒント アルゴリズムの使用を強制します。 |
| Auto Light | モノクロではないディスプレイに対して最適化した自動ヒント アルゴリズムの使用を強制します。 |
| Monochrome | モノクロ ディスプレイに対して最適化した自動ヒント アルゴリズムの使用を強制します。 |
| None | ヒントを使用しません。 |
[/REGION] 
[/EXCERPT:hinting]

[EXCERPT:loadingpolicy]
[REGION:simpletable]
| 選択 | 説明 |
| --- | --- |
| Lazy Load | フォント全体をメモリに Lazy load (遅延ロード) します。これはストリーミングよりもメモリを消費しますが、フォント内のグリフをレンダリングするときに、ファイル IO はゼロになります。ただし、初めてのロードではヒッチが生じることがあります。 |
| Stream | ディスクからフォントをストリーミングします。これは Lazy Load や Inline に比べてメモリ消費は少ないですが、グリフをレンダリングするときにファイル IO があります。これにより、一部の状況やプラットフォームでヒッチが生じることがあります。 |
| Inline | フォント データをアセット内に埋め込みます。これはストリーミングよりもメモリを消費しますが、ヒッチを生じないことが保証されています (Font Face アセット内のフォント データに対してのみ有効です)。 |
[/REGION] 
[/EXCERPT:loadingpolicy]
--->


## Font アセットを 4.15 以降にアップグレード

アンリアル エンジン 4.15 から Font アセットは、Font と Font Faces という 2 つのアセットに分かれました。ロード中に既存の Font アセットはその内部フォントデータを、埋め込まれた Font Face アセットに自動的にアップグレードします。 
しかし、自動的にそれらを分割はしません。これを行うには、Font エディタを開き、**Default Font Family** リストで **Upgrade Data** を選択します。
これらのアセットを編集したり、作成した他の Font アセットと共有できるようになります。 

![](FontUpgradeData.png)(w:175)

**[Upgrade Data]** をクリックすると、新しい Font Face アセットを保存するように促されます。 


## フォント エディタ

**コンテンツ ブラウザ** で Font アセットを **ダブルクリック** すると、**フォント エディタ** ウィンドウ内でそのフォント アセットが開きます。 

![](FontEditorWindow.png)(w:820)

以下は Font Editor ウィンドウの各部を示したものです。 

#### ツールバー メニュー

![](ToolbarMenu.png)(w:550)

加えた変更を保存し、**[コンテンツ ブラウザ]** でアセットを見つけ、プレビュー ウィンドウの背景色を変更したり、
文字の表示色 (テキスト カラー) を変更することができます。加えた変更を更新またはエクスポートするオプションがあります。しかし、こうしたオプションは 
**オフライン** キャッシュ モード内でのみ利用可能です。 

#### デフォルト フォント ファミリー

![](DefaultFontFamily.png)(w:550)

このウィンドウでは Font アセットと合わせて使用するデフォルト フォント ファミリーを指定することができます。特定のフォント スタイルのバージョンを追加したり (例えば、標準、太字、イタリック、アンダーラインなど)、
ひとつのコンポジット フォントとして様々なフォント スタイルのコレクションを持つことができます。ブランクの Font アセットを作成したらこのウィンドウ内からフォントを
指定することもできます。フォントを追加したらフォントと併用するヒンティング アルゴリズムを定義することができます。 

#### サブ フォント ファミリー

![](AddSubFontFamily.png)(h:50)

このウィンドウでは、 **Add Sub-Font Family** ボタンをクリックすると、Font アセットが使用するサブフォント ファミリーを指定することができます。 

[![](SubFontFamily.png)(w:550)](SubFontFamily.png)

ここでは、文字範囲 (Character Range) を指定し、入力した文字がこの範囲に入ったらデフォルトの代わりに
別のフォント スタイルを指定することができます。これは異なる言語で様々なフォント タイプを使用したい場合に役立ちます。


#### プレビュー 

![](Preview.png)(w:550)

このウィンドウでは、フォントをプレビューすることが可能であり、サンプル テキストを入力するためのテキスト エントリ ボックスがあります。 

##### Draw For Metrics

[![](PreviewDrawFontMetrics.png)(w:550)](PreviewDrawFontMetrics.png)

**Draw Font Metrics** を切り替えるとは、ラインの高さ、グリフのバウンディング ボックス、ベース ラインをプレビューでオーバーレイ表示します。

* **Base Line** - テキストが入るラインです。
* **Line Bounds** - 任意のテキスト文字列の長さに対して作られたバウンディング ボックスです。 
* **Grapheme Cluster Bounds** - 任意の言語で論理文字とみなされる物の回りに描画されるバウンディング ボックスです。いくつかのグリフを含むことがあります (例、基本文字とアクセントのグリフ)。
* **Glyph Bounds** - 任意のグリフ周囲に描画されるバウンディング ボックスです。

#### Details

![](Details.png)(w:500)

このウィンドウではフォント キャッシュ タイプ、フォント サイズ、フォント名 (ランタイム用) を変更することができます。 
* 古い方式を使用している場合は、オフライン キャッシュ モードでフォントのパラメータを変更することができます。 
* 既存のフォント アセットを置き換えることなく **オフライン** から **ランタイム** に変換できます。 


以下はフォント アセットの例です。 

[REGION:lightbox]
[![](ExampleFontLayout.png)(w:820)](ExampleFontLayout.png)
[/REGION]

_画像をクリックして全画面表示にします。_

コンポジット フォントには常にデフォルト フォント ファミリーが含まれます。任意の文字範囲で使用するサブフォント ファミリーをいくつでも含むことができます。各フォント ファミリー自体は、スタイルに基づいて命名できる任意の数のフォントから構成されます。ランタイムには、その文字範囲に対してフォント ファミリーで利用可能なフォントに基づき各文字に最適なフォントが使用されます。 

上の画像でわかるように、日本語のテキストは日本語フォント ファミリーの文字範囲にあります。そのため、デフォルト フォント ファミリーの Roboto ではなく Source Han Sans を使用して描画されます。サブフォント ファミリーのフォントは Regular、Bold、および Light の場合と同様に名前の一致によって選択されるのが理想的です。しかし、Bold Italic のようにデフォルト フォントの属性に基づきマッチするようにフォールバックすることもできます (自動的に太字の日本語フォントが選択されます。このフォントには、太字属性が含まれており、最適マッチであったためです)。 


## フォントの作成とインポート

このセクションでは、新規 Font アセットの作成方法、TTF ファイルまたは OTF ファイルをインポートして Font Face アセットと Font アセットを生成する方法について説明します。 

### フォント アセットを作成する

フォント アセットを作成するには、以下の手順に従います。 

1.	**コンテンツ ブラウザ** で、 **[Add New]** ボタンをクリックし、 **[User Interface (ユーザーインターフェース)]** で **[Font]** オプションをクリックします。 

	[REGION:lightbox]
	[![](NewFont.png)(h:500)](NewFont.png)
	[/REGION]
	[REGION:caption]
	_画像をクリックしてフルサイズで表示_
	[/REGION]
1.	新しい Composite Font アセットが作成されます。**名前** を付けるよう促されます。 

	![](NameFont.png)

1.	名前を入力したらアセットにアスタリスク記号が付いているのがわかります。これはアセットが保存されていないことを示します。**[Save All]** ボタンをクリックしてアセットを保存します。次に表示されるポップアップ メニューで保存を確認して終了します。

	![](SaveFont.png)
	 

[REGION:tip]
**[Add New]** ボタンをクリックする代わりに **[コンテンツ ブラウザ]** の空きエリアで **右クリック** してコンテキスト メニューを呼び出すこともできます。そこから **[User Interface]** と **[Font]** オプションをクリックして Font アセットを作成します。アセットを必ず保存してください！ 
[/REGION]

エディタで新規 Font アセットを作成すると、空のコンポジット フォント アセットが作成され、フォント エディタ を使用してそのパラメータを定義することができます。TTF ファイルまたは OTF ファイルをインポートする場合、新しい Font Face アセットが作成されます。
指定したデータを使用して Composite Font アセットを自動的に作成するオプションがあります (この時点でフォント エディタを開いてパラメータを追加で定義することができます)。


### フォントのインポート

TTF ファイルまたは OTF ファイルをエディタにインポートすることができます。これを行うには以下のように様々な方法があります。

##### コンテンツ ブラウザを使ってインポートする

コンテンツ ブラウザの **[Import]** ボタンを使って TTF または OTF のフォントファイルを選択することができます。

1. コンテンツ ブラウザで **[Import]** ボタンをクリックします。 

	![](Import1.png)
1. 表示されるダイアログ ボックスでインポートする TFF または OTF のフォント ファイルに移動し、選択します。**[Open]** をクリックします。

	![](Import2.png)(w:500)
1. しばらくすると、**[Font Face Import Options]** が表示されます。 

	![](Import3.png)(w:500)

	コンテンツ ブラウザで Font Face アセットと Composite Font アセットを作成するには、表示されているオプションから、**Yes** を選択します。

	![](Import3a.png)

##### ドラッグ＆ドロップを使用したインポート

TTF ファイルまたは OTF ファイルをコンテンツ ブラウザに直接 **ドラッグ & ドロップ** し、フォント アセットを作成することもできます。

1. TTF ファイルまたは OTF ファイルを保存した場所に移動します。ファイルをひとつを選択して **コンテンツ ブラウザ** までドラッグしてインポート プロセスを開始します。 

	![](Import4.png)(w:650)
1. しばらくすると、**Font Import Options** が表示されます。 

	![](Import3.png)(w:500)

	コンテンツ ブラウザで Font Face アセットと Composite Font アセットを作成するには、表示されているオプションから、**Yes** を選択します。

	![](Import3a.png)


#### フォント エディタを使ってインポートする

**Font Editor** の Default Font Family リストから Font Face アセットを直接インポートして作成することができます。 

1. 既存の **Font** アセットを開くか、コンテンツ ブラウザの **[Add New (新規追加)]** ボタンを使用して、新しいアセットを作成します。

	![](Import5.png)(w:600)
1. デフォルトのフォント ファミリーに新しいフォントを追加するには、**[Add Font]** ボタンをクリックします。

	![](Import6.png)(w:500) 
1. 選択のドロップダウンの隣にある **folder** ボタンを選択します。 

	![](Import7.png)(w:500)
1. 表示されるダイアログ ボックスでインポートする TFF または OTF のフォント ファイルに移動し、選択します。**[Open]** をクリックします。

	![](Import2.png)(w:500)
1. 続いて **[Save Font Face]** ウィンドウが表示されます。フォントに名前を付けてゲーム フォルダの階層で保存場所を選択します。**[Save (保存)]** をクリックします。

	![](Import8.png)(w:500)

	これで Font Face アセットがフォルダの階層に入ります。

	![](Import3a.png)


## UMG のフォント

[Widge ブループリント](Engine/UMG/UserGuide/WidgetBlueprints) を作成し、テキストを含むウィジェット (テキストボックスまたはテキスト ウィジェットなど) を配置後、それをクリックし、**[Details]** パネルにアクセスすると、**[Appearance]** に **[Font]** オプションがあります。 

![](FontWithNewOptions.png)

デフォルトでは、エンジンは **Roboto** を使用します。しかし、ドロップダウン メニューをクリックし、作成した任意のコンポジット フォント アセットを選択し、代わりに使用することができます。 

![](NewFontWithNewOptions.png)

このメニューからコンポジット フォントを作成し、新規アセットをどこに保存するかを指定することもできます (デフォルトでブランクになり、入力する必要があります)。 

コンポジット フォントを選択したら、2 つめのドロップダウン メニューで使用するフォントを **[Default Font Family]** から選択できます。 

![](FontStyleNewOptions.png)

フォント サイズを入力ボックスで指定することもできます。 

![](FontSizeNewOptions.png)

現時点では UMG は **ランタイム** にキャッシュされるフォント アセットのみをサポートしています。古い方式を用いてフォントを割り当てた場合、既存のファイル ベースのフォント設定は失われません。しかし、UMG でカスタム フォントを使用するためには、いずれは Composite Font アセットを作成する必要があります。 

[色、マテリアル、アウトラインのプロパティを設定](Engine/UMG/UserGuide/Fonts/Materials) したり、陰影をつけてフォントにスタイルを設定することができます。 






