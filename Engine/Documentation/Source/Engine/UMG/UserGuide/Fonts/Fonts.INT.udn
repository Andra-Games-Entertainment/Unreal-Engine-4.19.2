Availability:Public
Title: Fonts
Crumbs:%ROOT%, Engine, Engine/UMG, Engine/UMG/UserGuide
Description:Details the process of importing fonts, working with the Font Editor and using fonts in UMG. 
Parent: Engine/UMG
Related: Engine/UMG
Related: Engine/UMG/UserGuide/WidgetBlueprints
Related: Engine/UMG/UserGuide/WidgetTypeReference
Version: 4.15
tags:UMG UI Designer

[TOC(start:2 end:2)]

This page covers how to import your own fonts, using the **Font Editor**, and fonts in the **Unreal Motion Graphics (UMG) UI Designer**. 

## Font Assets

Fonts in Unreal Engine 4 are categorized as a **Font** asset and use two caching methods, **Runtime** which is in the form of a Composite Font or **Offline** which is the older
pre-computed Font Atlas method. You can switch between the two methods by opening up a Font asset in the Font Editor (this provides a simple way to convert existing Font assets
from the older method to the new composite method without having to replace them). 

## Font Face Assets

The **Font Face** asset is created when you import a font and it stores the font data that can be referenced by the Font asset. This means that the same font data can be reused across 
multiple Font assets or even with multiple typefaces within the asset, and ultimately reduces memory consumption. 

![](FontFaceWindow.png)(w:400)

From the Font Face editor window you have access to the settings for **Hinting** and **Loading Policy**.

[REGION:simpletable]
| Property | Description |
| --- |--- |
| Source File Name | The filename of the font face we were created from. This may not always exist on disk, as we may have previously loaded and cached the font data inside this asset. |
| Hinting | The hinting algorithm to use with the font face. [INCLUDE:#hinting] |
| Loading Policy | Enum controlling how this font face should be loaded at runtime. See the enum for more explanations of the options. [INCLUDE:#loadingpolicy]|
[/REGION]

<!---
[EXCERPT:hinting]
[REGION:simpletable]
| Selection | Description  |
| --- | --- |
| Default | Use the default hinting specified in the font. |
| Auto | Force the use of an automatic hinting algorithm. |
| Auto Light | Force the use of an automatic hinting algorithm, optimized for non-monochrome displays. |
| Monochrome | Force the use of an automatic hinting algorithm optimized for monochrome displays. |
| None | Do not use hinting. |
[/REGION] 
[/EXCERPT:hinting]

[EXCERPT:loadingpolicy]
[REGION:simpletable]
| Selection | Description |
| --- | --- |
| Lazy Load | Lazy load the entire font into memory. This will consume more memory than Streaming, however, there will be zero file-IO when rendering glyphs within the font, although the initial load may cause a hitch. |
| Stream | Stream the font from disk. This will consume less memory than Lazy Load or Inline, however, there will be file-IO when rendering glyphs,  which may cause hitches under certain circumstances or on certain platforms. |
| Inline | Embed the font data within the asset. This will consume more memory than Streaming, however, it is guaranteed to be hitch free (only valid for font data within a Font Face asset). |
[/REGION] 
[/EXCERPT:loadingpolicy]
--->


## Upgrading Font Assets to 4.15 and Later

Starting with Unreal Engine 4.15, Font assets have now been split into two separate assets; Font and Font Faces. Existing Font assets will upgrade their internal font data into 
embedded Font Face assets during load, but will not automatically split them. You will have to do this by opening the Font Editor and selecting **Upgrade Data** under the **Default Font Family** list.
This will enable you to edit and share these assets with other Font assets that you've created. 

![](FontUpgradeData.png)(w:175)

After you click **Upgrade Data**, you will be prompted to save the new Font Face asset. 


## Font Editor

When you **Double-click** on a Font asset in the **Content Browser**, it will open up inside the **Font Editor** window. 

![](FontEditorWindow.png)(w:820)

A breakdown of the Font Editor Window is presented below: 

#### Toolbar Menu

![](ToolbarMenu.png)(w:550)

From this menu, you can save any changes you make, find the asset in the **Content Browser**, change the Background Color of the preview window (4) or
the Foreground Color (text color) in the preview window. There are options for Updating or Exporting changes made, however, these options are only available
within the **Offline** cache mode. 

#### Default Font Family

![](DefaultFontFamily.png)(w:550)

In this window, you can assign the Default Font Family for use with this Font asset. You can add versions of a particular Font style (for example Normal,
Bold, Italics, Underline, etc.) or have a collection of different Font styles as one Composite Font. If you have created a blank Font asset, you can assign
a font from inside this window as well. Once a Font has been added, you can also define the hinting algorithm used with the font. 

#### Sub-Font Family

![](AddSubFontFamily.png)(h:50)

In this window, when you click the **Add Sub-Font Family* button, you can assign the Sub-Font Family for this Font asset to use. 

[![](SubFontFamily.png)(w:550)](SubFontFamily.png)

Here you can specify a Character Range and if a character entered falls within the range you can specify a different Font style
to use instead of the Default. This is useful for when you want to use different Font types for different languages.


#### Preview 

![](Preview.png)(w:550)

This window allows you to preview your fonts and provides a text entry box for entering sample texts. 

##### Draw For Metrics

[![](PreviewDrawFontMetrics.png)(w:550)](PreviewDrawFontMetrics.png)

The **Draw Font Metrics** toggle will overlay the line height, glyph bounding boxes, and base-line as part of the preview.

* **Base Line** - This is the line in which the text sits.
* **Line Bounds** - This is the bounding box created for the length of the given text string. 
* **Grapheme Cluster Bounds** - This is the bounding box drawn around what is considered a logical character in a given language, and may be comprised of several glyphs (eg. a base character and accent glyph).
* **Glyph Bounds** - This is the bounding box drawn around the given glyph.

#### Details

![](Details.png)(w:500)

In this window, you can change the Font Cache Type as well as change the Font Size and Font Name (for Runtime). 
* If you are using the older method, you can still change the parameters for your Font while in Offline cache mode. 
* You can also convert any existing Font assets from **Offline** to **Runtime** without having to replace them. 


An example Font asset is provided below. 

[REGION:lightbox]
[![](ExampleFontLayout.png)(w:820)](ExampleFontLayout.png)
[/REGION]

_Click image for a full view._

A Composite Font will always contain a Default Font Family, and may also contain any number of Sub-Font Families that should be used for a given range of characters. Each Font Family is itself made up of any number of Fonts that can be named based on their style. At runtime, the most suitable Font to use for each character based on the Fonts available in the Font Family for that character range is used. 

As seen in the example image above, the Japanese text falls within the character ranges of the Japanese font family and so is drawn using Source Han Sans rather than the Default Font Family Roboto. Fonts in a Sub-Font Family are preferably chosen by name match, as in the case of Regular, Bold, and Light, however can also fallback to matching based on the attributes of the Default Font, as is the case of Bold Italic (it automatically chose the Bold Japanese font because the font contained the Bold attribute, and was the best match). 


## Creating & Importing Fonts

This section illustrates how to create a new Font asset and the ways you can import TTF or OTF files to generate your Font Face and Font assets. 

### Creating Font Assets

To create a Font asset, follow the steps below: 

1.	Click the **Add New** button inside the **Content Browser**, then under **User Interface** select the **Font** option. 

	[REGION:lightbox]
	[![](NewFont.png)(h:500)](NewFont.png)
	[/REGION]
	[REGION:caption]
	_Click image for full view._
	[/REGION]
1.	A new Composite Font asset will be created, prompting you to give it a **Name**. 

	![](NameFont.png)

1.	Once you enter a name, you will notice an asterisk appears on the asset, this indicates that the asset has not be saved. Click the **Save All** button to save your asset, then confirm the save in the pop-up menu that appears to finish.

	![](SaveFont.png)
	 

[REGION:tip]
Instead of clicking the **Add New** button, you can instead **Right-click** in an empty space in the **Content Browser** to access the context menu. From there, you can click the **User Interface** and **Font** option to create a Font asset. Do not forget to save your assets! 
[/REGION]

When you create a new Font asset inside the Editor, it will create an empty Composite Font asset which you can then define its parameters using the Font Editor. When you import a TTF or OTF file, a new Font Face asset is created
and you have the option to automatically create a Composite Font asset using the font data you provided (at which point you can define additional parameters by opening it up in the Font Editor).


### Importing Fonts

You can import either TTF or OTF files into the Editor, and you can do so in a number of different ways demonstrated below.

##### Importing Using the Content Browser

You can use the Content Browser's **Import** button to select your TTF or OTF font file.

1. In the Content Browser, click the **Import** button. 

	![](Import1.png)
1. In the dialogue box that appears, navigate to the TFF or OTF font file you want to import and select it. Then, click **Open**.

	![](Import2.png)(w:500)
1. After a moment, the **Font Face Import Options** will appear. 

	![](Import3.png)(w:500)
		
	Select **Yes** from the options listed to create your Font Face asset and your Composite Font asset in your Content Browser.
	
	![](Import3a.png)
	
	
##### Importing Using Drag-and-drop

You can **Drag-and-drop** a TTF or OTF file directly into the Content Browser to create your font assets.

1. Navigate to the folder where you've stored your TTF or OTF file(s). Select and hold to drag one over the **Content Browser** to start the import process. 

	![](Import4.png)(w:650)
1. After a moment, the **Font Import Options** will appear. 
	
	![](Import3.png)(w:500)
		
	Select **Yes** from the options listed to create your Font Face asset and your Composite Font asset in your Content Browser.
	
	![](Import3a.png)


#### Importing Using the Font Editor

You can import and create Font Face assets directly from the Default Font Family list in the **Font Editor**. 

1. Open an existing **Font** asset or create a new one using the **Add New** button in the Content Browser.

	![](Import5.png)(w:600)
1. Click the **Add Font**  button to add a new font selection to the Default Font Family.

	![](Import6.png)(w:500) 
1. Select the **folder** button next to the selection dropdown. 
	
	![](Import7.png)(w:500)
1. In the dialogue box that appears, navigate to the TFF or OTF font file you want to import and select it. Then, click **Open**.

	![](Import2.png)(w:500)
1. Next, the **Save Font Face** window will appear. Give your font a name and choose the save location in your game folder's hierarchy. Then, click **Save**.

	![](Import8.png)(w:500)
	
	The Font Face asset can now be found in your folder hierarchy.
	
	![](Import3a.png)
	

## Fonts in UMG

Once you have created a [Widget Blueprint](Engine/UMG/UserGuide/WidgetBlueprints) and placed a Widget that contains Text (such as a Text Box or Text Widget), when clicking on it and accessing the **Details** panel, under **Appearance**, you will see a **Font** option. 

![](FontWithNewOptions.png)

By default the Engine uses **Roboto**, however, if you click the drop-down menu, any Composite Font assets created can be selected and used instead. 

![](NewFontWithNewOptions.png)

You can also choose to create a Composite Font from this menu and specify where the new asset should be saved (it will be blank by default and you will have to fill it out). 

Once you select your Composite Font, the second drop-down menu will allow you to select a font to use from the **Default Font Family**. 

![](FontStyleNewOptions.png)

You can also specify the size of the font in the input box. 

![](FontSizeNewOptions.png)

Currently, UMG only supports **Runtime** cached font assets. Also, if you have assigned fonts using the old method, none of your existing file based font settings will be lost, however going forward, you will need to create a Composite Font asset in order to use custom fonts with UMG. 

You can style your **Font** by [setting colors, Materials, and outline properties](Engine/UMG/UserGuide/Fonts/Materials), as well as by using shadows. 






