Availability: Public
Title:Volumes Overview
Crumbs:%ROOT%, Engine, Engine/Actors
Description:Guide to placing and working with Volumes to augment the behavior and setup of your levels.
version:4.16
type:overview
Parent:Engine/Actors/Types
order:8
type:overview


[TOC(start:2 end:3)]

**Volumes** are 3-dimensional areas within your levels that can serve variety of purposes. Some of these purposes include:

* Causing damage to the Player.
* Blocking Actors from entering the volume, acting as a collision surface.
* Detecting and reacting to Actors entering or leaving the volume.
* Changing the way a level calculates its lighting or visibility.

## Volume Placement Considerations

There are two important points to keep in mind about using volumes:

1. Volumes are support actors, generally used to detect when certain Actor types have entered a specific area and trigger an effect in response.
1. Volumes sometimes have built-in effects of their own (either in code or Blueprints), but most often they'll provide cues to other Actors. They should usually be thought of as components of a greater effect, with some other level element acting as a visual cue.

As an example, a **Pain-Causing Volume**, which causes damage to anything inside the volume, could be placed into a level like this:

[VAR:VolumeDemoSize]
h:301
[/VAR]

[REGION:imagetable]
|![](PainCausingVolume_NoEffect.png)(%VolumeDemoSize%)|![](PainCausingVolume_NoEffect_NoVolume.png)(%VolumeDemoSize%)|
|:-----------:|:----------:|
| In Editor | In Game |
[/REGION]

In this case, the player will not know to avoid the volume, or understand why they take damage when they enter it. The level designer should provide a hint to the player that explains the Pain Causing Volume:


[REGION:imagetable]
|![](PainCausingVolume_Effect.png)(h:343)|![](PainCausingVolume_Effect_NoVolume.png)(h:343)|
|:-----------:|:----------:|
| In Editor | In Game |
[/REGION]

In this case, the fire particle effect provides a visual explanation of why the area is dangerous, while the Pain Causing Volume supports the visuals with a gameplay effect of decreasing the player's health during exposure to the fire.


## Creating Volumes

Volumes can be created by selecting a volume from the **Volumes** tab of the **Modes** menu and dragging and dropping it into the level viewport. 

![](creatingVolumes.png)

Once the volume has been placed in the level, you can then resize and (or) reposition the volume as you see fit. 

## Volume Types


### Audio Volume
**Audio Volumes** allow you to control and apply various sounds in your level as well as provide an avenue to create compartmentilized audio zones where you can control what is heard inside and outside of the volume. Through the use of Audio Volumes, you can generate audio transitions via fading and control the Ambient Zone settings within the volumes themselves.
[REGION:note]See the [details page](Engine/Actors/Volumes/AudioVolumeDetails) for more information on the specific properties of Audio Volumes.[/REGION]


### Blocking Volume

A **Blocking Volume** serves as a collision shape through which objects are not intended to pass. By adjusting the collision channels on the volume (pictured below), you can control which types of objects will be allowed to pass, and if any objects should also generate overlap events when they pass through the volume.
[REGION:note]See the [Collision Documentation](Engine\Physics\Collision) for more details.[/REGION]

![](blocking_volume_details.png)

Blocking Volumes can be used in the place of collision surfaces on Static Meshes, particularly in the case of walls in structures. This can cause scenes to operate more predictably, since physical objects won't interact with small details like bumps on the floor and walls. It can also improve performance by reducing the cost of physics simulation.


### Camera Blocking Volume

**Camera Blocking Volumes** are volumes with their collision settings pre-configured to block only cameras and ignore everything else. They are intended to define invisible barriers that keep the camera out of bad locations.  An example of this might be in a third-person game, when the walls of the play area have decorative coverings like leafy vines. In these cases, a thin Camera Blocking Volume can be placed against the wall so that the camera doesn't bump into the vines or go behind the leaves, leaving it to slide smoothly and provide an unobstructed view of the action in the room.


### Cull Distance Volume

**Cull Distance Volumes** are optimization tools that allow for objects to be culled (not drawn to the screen) based on that object's distance from the camera and its size. This can help optimize your scene by not drawing objects when they are small enough to be considered unimportant. Size is calculated by the bounding box along its longest dimension, and the cull distance chosen is the one closest to that size.

Cull Distance Volume setup is dependent on the **Cull Distances** property, shown in the **Details** panel below.

![](CullDistancesProperty.png)

In the image above, the properties define the following behavior:

* Objects within the volume that have a size closest to 50 units (distance equal to or less than 85 units) will be culled (disappear) when they are 500 units away from the camera or farther.
* Objects within the volume that have a size closest to 120 units (distance between 85 units and 210 units) will be culled (disappear) when they are 1000 units away from the camera or farther.
* Objects within the volume that have a size closest to 300 units (distance equal to or greater than 210 units) will never be culled, since 0 in this case is treated as infinity, meaning that the camera can never get far enough away.

Setup starts with adding a new entry into the Cull Distances array, which is done by clicking the ![](button_Plus.png) button. Next, simply fill in the size of a given object and the desired distance at which you want objects of that size or smaller to be culled. These properties do not have to be created in a specific order.


### Hierarchical LOD Volume

**Hierarchical LOD Volumes** have no special properties, but are used by the [HLOD](Engine/HLOD) system to group Actors into a single HLOD cluster. When generating clusters, the Unreal Engine will override its normal generation process in deference to manually-placed volumes.


### Kill Z Volume

The purpose of **Kill Z Volume** is to prevent objects from going out of bounds in certain types of games, such as falling off of a cliff or into a pit in a platformer game, or leaving a spaceship without a suit in a science-fiction setting. The Kill Z Volume will call the `FellOutOfWorld` function on any Actor that enters it, and by default, Actors will go through a quick cleanup procedure and then destroy themselves. You can override this behavior for any of your Actor types if your game requires something different. For example, if a key or other item that the player is required to collect in order to continue the game falls into a lava pit, your game might want to teleport the item back up to an area the player can reach rather than destroying it, or at least inform the player that the item was lost and reload the last checkpoint, rather than leaving the game in an unwinnable state.


### Level Streaming Volumes

[EXCERPT:LSV]
**Level Streaming Volumes** are used to aid in the [level streaming](Engine/LevelStreaming) process. They provide a simple way to encapsulate a level, as well as control when it streams in and out of memory, based on when a Player enters or exits the volume.
[/EXCERPT]


### Lightmass Character Indirect Detail Volume

The **Lightmass Character Indirect Detail Volume** is similar to the Lightmass Importance Volume and generates indirect light samples, not just at Player height above ground, but generates them inside the entire Volume. An example usage of this type of Volume would be an elevator shaft to ensure the indirect lighting is correct extending up/down the shaft.


### Lightmass Importance Volume

**Lightmass Importance Volumes** are used to focus Lightmass calculations. Lightmass is the precalculated lighting and global illumination system used in Unreal Engine 4. In order to minimize - and thereby optimize - the amount of processing needed to generate precalculated lights in a level, Lightmass Importance Volumes are use to enclose the areas of the level geometry. Lightmass will only calculate within that area, skipping anything outside of it.
[REGION:note]For more information on Lightmass and Lightmass Importance Volumes, please see the [Lightmass documentation](Engine/Rendering/LightingAndShadows/Lightmass).[/REGION]


### Mesh Merge Culling Volume

**Mesh Merge Culling Volumes** mark the mesh objects they contain so that these objects will be combined into a single mesh. This can improve performance by making a collection of small meshes in a contained area all cull together as one mesh, or by causing [HLOD](Engine/HLOD) generation to reduce geometry in a more optimal way.


### Nav Mesh Bounds Volume

**Nav Mesh Bounds Volumes** are used as a way to control where Nav Meshes will be built in a level. Nav Meshes are used to calculate navigation paths throughout the areas of a level.

Within the volume, a Nav Mesh is constructed on all surfaces with an appropriate angle to be walked upon. You may overlap as many of these as you need to generate the desired Nav Mesh.

To use the Nav Mesh Bounds Volume, simply create one (or more) that encloses the navigable areas of your level. The Nav Mesh will be built automatically.

[REGION:tip]
You can press **P** at any time in the viewport to visualize the Nav Mesh.
[/REGION]

[REGION:note]Please see the Content Examples and [Nav Mesh Documentation](Resources\ContentExamples\NavMesh) for more details and examples.[/REGION]


### Pain-Causing Volume

**Pain-Causing Volumes** are Physics Volumes with the ability to inflict damage on players. These are useful when you have obvious areas of a level that the player should not go, such as a lava pit, a cloud of toxic gas, and so on.
[REGION:note]See the [details page](Engine/Actors/Volumes/PainCausingVolumeDetails) for more information on the specific properties of Pain-Causing Volumes.[/REGION]


### Physics Volume

**Physics Volumes** are volumes in which the physical setup that affects characters and other physics objects can be manipulated. A common use for them is for the creation of watery environments in which the player needs to swim. The effects of Physics Volumes are visible and can be interpreted as desired. The Character Movement Component class uses the current fields to adjust how their owning `Character` moves through the environment. If your game has custom physics, deriving your own child class from `APhysicsVolume` can help you to provide it.
[REGION:note]See the [details page](Engine/Actors/Volumes/PhysicsVolumeDetails) for more information on the specific properties of Physics Volumes.[/REGION]


### Post Process Volume

A **Post Process Volume** is a space in which the Post Process settings applied to the camera can be overridden by adjusting the properties in the **Details** panel. 
[REGION:note]For more information on Post Processing, please see the [Post Processing Documentation](Engine/Rendering/PostProcessEffects).[/REGION]
 

### Precomputed Visibility Volume
**Precomputed Visibility Volumes** are used primiarly for performance optimization. These volumes store the visibility of Actors for their location in the world. These should be placed only in areas the Player can access.


### Precomputed Visibility Override Volume
**Precomputed Visibility Override Volumes** let you manually override the visibility of Actors for their location in the world if the auto generated result of a Precomputed Visibilty Volume is undesired. These are also used for performance optimization and should only be placed in areas where the Player can access.


### Trigger Volume

**Trigger Volumes** are used as a way to cause events when a Player or other object enters or exits them. They can be used quickly with the **Level Blueprint** to test out events and gameplay scenarios or functionality without the need for additional Blueprints.

For example, you could place a TriggerVolume in your level, then create an overlap event for the volume in your **Level Blueprint** which can play a sound, open a door, or start a cinematic scene.

[REGION:note]
Remember to check the collision settings to ensure that your trigger will react to the intended Actors with the Overlap collision response setting.
[/REGION]
