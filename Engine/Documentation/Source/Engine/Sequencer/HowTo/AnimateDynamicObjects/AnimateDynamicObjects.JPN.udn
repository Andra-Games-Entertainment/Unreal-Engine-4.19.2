INTSourceChangelist:3348041
Availability:Public
Title:ランタイムに動的オブジェクトをアニメートする
Crumbs: %ROOT%, Engine, Engine/Sequencer, Engine/Sequencer/HowTo
Description:この例では、シーケンスでオーサリングされているものとは異なる動的オブジェクトにシーケンスをランタイムに適用する方法を説明します。
Version:4.15
SkillLevel:Advanced
parent:Engine/Sequencer/HowTo
order:1
checkpoint: editorqs
Related:Engine/Sequencer/Overview
Related:Engine\Sequencer\ReferenceEditor\
tags:Sequencer

ゲームプレイ目的でシネマティックスを作成する場合、ランタイムに動的にスポーンされるオブジェクトをシーケンサーでアニメートする必要が生じるかもしれません。 
例えば、パスに沿って移動するアニメートしたオブジェクトを作成し、そのオブジェクトがプレイヤーによって定義可能なものであるとします。 
[ブループリント ビジュアル スクリプティング](Engine/Blueprints) で、**Get Sequence Bindings** ノードを使ってレベル シーケンスからバインディング識別子を公開し、こうしたバインディングを自分のものでオーバーライドすることができます。 

この例では、以下のようにオブジェクトをアニメートしパスに沿って動かし、プレイヤーがボタンを押すことでオブジェクトを変更できるようにします。 

[OBJECT:EmbeddedVideo]
[PARAMLITERAL:width]
640
[/PARAMLITERAL]
[PARAMLITERAL:height]
360
[/PARAMLITERAL]
[PARAMLITERAL:videoid]
XdahqJz2cyM
[/PARAMLITERAL]
[/OBJECT]

[REGION:note]
ここでは **Starter Content Enabled (スターター コンテンツを有効にした状態)** で **Blueprint Third Person Template** プロジェクトを使います。 
[/REGION]

## ステップ

1.	**コンテンツ ブラウザ** で、**Actor** クラスに基づき 2 つの新規 **ブループリント** を作成します。ひとつは **Cube_Blueprint** 、もうひとつは **Sphere_Blueprint** という名前を付けます。 

	![](DynamicAnim_01.png)

	デフォルト シーケンスでは、Cube ブループリントを使用しますが、プレイヤーがキーを押すと Sphere ブループリントに置き変わります。 

1.	各ブループリント内で、**Shape_Cube** メッシュを使う **Static Mesh** コンポーネントと、もうひとつ **Shape_Sphere** メッシュを使う **Static Mesh** コンポーネントを追加します。 

	![](DynamicAnim_02.png)

1.	**[Modes]** パネルから **Empty Actor** をレベル ビューポートの任意の場所にドラッグします。 

	![](DynamicAnim_03.png)(w:940)

1.	**メイン ツールバー** から **[Cinematics (シネマティックス)]** ボタンと、**[Add Level Sequence (レベル シーケンスを追加)]** をクリックして、任意の名前を付けます。 

	![](DynamicAnim_04.png)

1.	シーケンス内で、レベルで **Empty Actor** を選択した状態で、**Add** をクリックして、次に **Add Actor** をクリックしてシーケンスに追加します。 

	![](DynamicAnim_05.png)

1.	**Empty Actor** の **Transform** トラックを追加し、レベル内の最初の位置として **0** にキーを追加します。 

	![](DynamicAnim_06.png)

1.	タイムラインをフレーム **50** まで動かします。次に、レベルで **Empty Actor** を動かし、**S** を押してその新しい位置に新規キーを追加します。 

	![](DynamicAnim_07.png)(w:740)

1.	タイムラインをフレーム **100** まで動かします。次に、**Empty Actor** を開始位置に戻し、**S** を押して、そのトランスフォーム終了位置にキーを追加します。 

	![](DynamicAnim_08.png)(w:740)

	フレーム 100 でシーケンサー内で **]** キーを押して、このキーでシーケンスを終了することもできます。 

1.	レベル ビューポートでレベル シーケンスを選択します。次に、**[Details]** パネルで、**[Loop]** を **[Loop Indefinitely]** に設定します。 

	![](DynamicAnim_09.png)

1.	レベル ビューポートでレベル シーケンスを選択した状態で、**メイン ツールバー** から、**[Blueprints]** を選択し、続いて **[Open Level Blueprint]** を選択します。 

	![](DynamicAnim_10.png)

1.	グラフ内で **右クリック** して、レベル シーケンスへのリファレンスを作成します。 

	![](DynamicAnim_10b.png)

	この場合、レベル シーケンスに **Master** という名前を付けましたが、別の名前を付けることもできます。 

1.	**右クリック** して、**Event Begin Play** ノードを追加します。次に、レベル シーケンスのリファレンスからドラッグして、**Play (Sequence Player)** ノードを追加します。 

	![](DynamicAnim_11.png)

	以下のようにノードを接続します。 

	![](DynamicAnim_12.png)

	これでゲーム開始時にシーケンスが自動的に開始します。 

1.	グラフ内で **右クリック** し、 **1** Keyboard Event を追加し、 **Flip Flop** ノードに接続します。 

	![](DynamicAnim_13.png)

	初めて 1 を押すと、Empty Actor が Cube に変わります。再度 1 を押すと、Sphere に変わります。 

1.	**右クリック** して、 **Spawn Actor from Class** ノードを作成し、クラスを **Cube Blueprint** として設定します。 

1.	**Return Value** を **右クリック** し、 **Cube** に **変数化** し、 **Spawn Transform** からドラッグして **Make Transform** を使用します。 

	![](DynamicAnim_14.png)

	ここでは、1 を押したときに、Cube ブループリントをスポーンし、Cubeという変数として格納し、スポーンするデフォルト トランスフォームを与えます。 

1.	**Flip Flop** ノードの **B** ピンから、**Spawn Actor from Class** (**Sphere Blueprint** に設定されている) を使って、それを格納する変数を作成し、以下のように接続します。 

	![](DynamicAnim_15.png)

	さらに 1 を押すと、Sphere ブループリントを作成し、スポーンし、後で使用するために変数として格納します。 

1.	グラフ内で **右クリック** し、 **Get Sequence Bindings** ノードを追加します。**[Details]** パネルでそれをレベル シーケンスにポイントします。 

	![](DynamicAnim_16.png)

	これでブループリント スクリプトを通してレベル シーケンス内のものにアクセスしオーバーライドすることができます。 

1.	グラフ内で **右クリック** して、**Add Binding** ノードを追加し、以下のノードを接続します。 

	![](DynamicAnim_17.png)

	上の図では、レベル シーケンスへのリファレンスを **Target** として接続し、**Get Sequence Bindings** ノードを **Binding** として接続しました。スポーンした Cube に対して作成した変数は **Actor** として接続しました。 
	これでレベル シーケンス内の Empty Actor (**Actor**) を指定したアクタに置換することができます (スポーンする **Cube** または **Sphere**)。Empty Actor に適用されたアニメーションも、バインディングの一部として設定したアクタに適用されます。 

1.	スクリプトの **Sphere** 部分に対して前のステップを繰り返し、 **Actor** として **Cube** を **Sphere** に置き換えます。 

	![](DynamicAnim_18.png)

1.	スクリプトの Cube 部分の **Add Binding** ノードの後に、**Sphere** 変数を使って、**?IsValid** チェックを行い、有効ならば **Destroy Actor** します。 

	![](DynamicAnim_19.png)

	これで Cube スポーン時に Sphere が破棄されます。 

1.	スクリプトの **Sphere** 部分に対して前のステップを繰り返し、**Cube** 変数で **?IsValid** チェックを行い、有効ならば **Destroy Actor** します。 

	![](DynamicAnim_20.png)

	これで Sphere スポーン時に Cube が破棄されます。 

1.	エディタで再生し、**1** キーを押して、スポーンしたアクタ間を循環させます。 
	## 最終結果




エディタで再生し、1 キーを押すと、Empty Actor が Cube または Sphere のいずれかのスポーンしたアクタに置き換わりますが、適用したアニメーションを使い続けます。 

[OBJECT:EmbeddedVideo]
[PARAMLITERAL:width]
640
[/PARAMLITERAL]
[PARAMLITERAL:height]
360
[/PARAMLITERAL]
[PARAMLITERAL:videoid]
XdahqJz2cyM
[/PARAMLITERAL]
[/OBJECT]

一連のアクタを設定、バインドし、**Set Binding** ノードを使ってバインディングし、特定のバインディングに対して **Reset Binding** したり、レベル シーケンス全体を **Reset Bindings** することもできます。 

![](AdditionalFunctions.png)



