Availability: Public
Title:Animating Dynamic Objects at Runtime
Crumbs: %ROOT%, Engine, Engine/Sequencer, Engine/Sequencer/HowTo
Description:This example illustrates how you can apply Sequences to dynamic objects at runtime that are different than the one the Sequence was authored with.
Version: 4.15
SkillLevel: Advanced
parent:Engine/Sequencer/HowTo
order:1
checkpoint: editorqs
Related: Engine/Sequencer/Overview
Related: Engine\Sequencer\ReferenceEditor\
tags:Sequencer

When creating cinematics for gameplay purposes, there may be times when you want to animate an object that is dynamically spawned at runtime through Sequencer. 
For instance, you create an animated object that moves along a path but that object is something that can be defined by the player. 
With the help of [Blueprint Visual Scripting](Engine/Blueprints), you can expose binding identifiers from a Level Sequence using the **Get Sequence Bindings** node and override any of those bindings with your own. 

In this example, we animate and move an object along a path and allow the player to change that object by pressing a button as seen below. 

[OBJECT:EmbeddedVideo]
[PARAMLITERAL:width]
640
[/PARAMLITERAL]
[PARAMLITERAL:height]
360
[/PARAMLITERAL]
[PARAMLITERAL:videoid]
XdahqJz2cyM
[/PARAMLITERAL]
[/OBJECT]

[REGION:note]
For this how-to, we are using the **Blueprint Third Person Template** project and with **Starter Content** enabled. 
[/REGION]

## Steps

1.	In the **Content Browser**, create two new **Blueprints** based off the **Actor** class and name one **Cube_Blueprint** and the other **Sphere_Blueprint**. 

	![](DynamicAnim_01.png)

	We will use the Cube Blueprint in our default Sequence but will swap in our Sphere Blueprint when the player presses a key. 

1.	Inside each Blueprint, add a **Static Mesh** component with one using a **Shape_Cube** mesh and the other using the **Shape_Sphere** mesh. 

	![](DynamicAnim_02.png)

1.	From the **Modes** panel, drag an **Empty Actor** anywhere into the Level Viewport. 

	![](DynamicAnim_03.png)(w:940)

1.	From the **Main Toolbar**, click the **Cinematics** button and **Add Level Sequence**, then assign it any name. 

	![](DynamicAnim_04.png)

1.	In your sequence, with the **Empty Actor** in the level selected, click **Add** then **Add Actor** to add it to the sequence. 

	![](DynamicAnim_05.png)

1.	Add a **Transform** track for the **Empty Actor** and add a key at **0** for its initial position in the level. 

	![](DynamicAnim_06.png)

1.	Move the timeline to frame **50** then move the **Empty Actor** in the level and press **S** to add a new key at its new position. 

	![](DynamicAnim_07.png)(w:740)

1.	Move the timeline to frame **100** then move the **Empty Actor** back to its starting position and press **S** to add a key at its ending transform. 

	![](DynamicAnim_08.png)(w:740)

	You can also press the **]** key inside Sequencer while at frame 100 to end the Sequence at this key. 

1.	Select your Level Sequence in the Level Viewport, then in the **Details** panel, set **Loop** to **Lopp Indefinitely**. 

	![](DynamicAnim_09.png)

1.	With your Level Sequence selected in the Level Viewport, from the **Main Toolbar**, select **Blueprints** and **Open Level Blueprint**. 

	![](DynamicAnim_10.png)

1.	**Right-click** in the graph and create a reference to your Level Sequence. 

	![](DynamicAnim_10b.png)

	In our case, we named our Level Sequence **Master**, however, your name may differ. 

1.	**Right-click** and add an **Event Begin Play** node, then drag off your Level Sequence reference and add a **Play (Sequence Player)** node. 

	![](DynamicAnim_11.png)

	Then connect the nodes as shown below. 

	![](DynamicAnim_12.png)

	This will automatically start playing our Sequence when we start the game. 

1.	**Right-click** in the graph and add a **1** Keyboard Event and connect it to a **Flip Flop** node. 

	![](DynamicAnim_13.png)

	When we press 1 the first time, we will change the Empty Actor to our Cube, when we press 1 again, we will change it to our Sphere. 

1.	**Right-click** and create a **Spawn Actor From Class** node and set the class as **Cube Blueprint**. 

1.	**Right-click** the **Return Value** and **Promote to Variable** called **Cube**, then drag off **Spawn Transform** and use **Make Transform**. 

	![](DynamicAnim_14.png)

	Here we are spawning our Cube Blueprint when 1 is pressed, storing it as a variable called Cube and giving it a default transform to spawn it at. 

1.	Off the **B** pin of the **Flip Flop** node, use **Spawn Actor from Class** (set to **Sphere Blueprint**), create a variable to store it and connect as shown below. 

	![](DynamicAnim_15.png)

	When we press 1 a second time, we are now creating and spawning in our Sphere Blueprint and storing it as a variable for use later. 

1.	**Right-click** in the graph and add the **Get Sequence Bindings** node and in the **Details** panel, point it to your Level Sequence. 

	![](DynamicAnim_16.png)

	This will allow us to access and override the contains within our Level Sequence through Blueprint Script. 

1.	**Right-click** in the graph and add the **Add Binding** node and connect the following nodes: 

	![](DynamicAnim_17.png)

	Above we have connected the reference to our Level Sequence as the **Target**, the **Get Sequence Bindings** node as the **Binding** and the variable we created for our spawned Cube as the **Actor**. 
	This will allow us to replace the Empty Actor (**Actor**) in our Level Sequence with the Actor we specify (our **Cube** that we spawn or our **Sphere**). The animation that was applied to the Empty Actor will also be applied to the Actor we set as part of the binding. 

1.	Repeat the previous step for the **Sphere** portion of script, replacing **Cube** with **Sphere** as the **Actor**. 

	![](DynamicAnim_18.png)

1.	Following the **Add Binding** node for the Cube portion of script, use the **Sphere** variable and perform an **? IsValid** check and **Destroy Actor** if valid. 

	![](DynamicAnim_19.png)

	This will destroy the Sphere when we spawn in the Cube. 

1.	Repeat the previous step for the **Sphere** portion of script, using **? IsValid** on the **Cube** variable and **Destroy Actor** if valid. 

	![](DynamicAnim_20.png)

	This will destroy the Cube when we spawn the Sphere. 

1.	Play in the editor, then press the **1** key to cycle between our spawned Actors. 
	


## End Result

When we play in the editor and press the 1 key, our Empty Actor is replaced by a spawned Actor either the Cube or the Sphere but continues to use the animation we applied. 

[OBJECT:EmbeddedVideo]
[PARAMLITERAL:width]
640
[/PARAMLITERAL]
[PARAMLITERAL:height]
360
[/PARAMLITERAL]
[PARAMLITERAL:videoid]
XdahqJz2cyM
[/PARAMLITERAL]
[/OBJECT]

You can also set and bind an array of Actors to a binding with the **Set Binding** node, **Reset Binding** for a particular binding or **Reset Bindings** for an entire Level Sequence. 

![](AdditionalFunctions.png)



