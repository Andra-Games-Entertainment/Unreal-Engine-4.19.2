INTSourceChangelist:3322543
Availability:Public
Title:仮想現実 （VR） のベスト プラクティス
Crumbs:
Description:VR 開発関連の情報
Navigation:platform
Version:4.14
parent:Platforms/VR
type:overview
tags:VR

[VAR:Params]
[PARAM:image]
	![%Platforms:title%](%ROOT%/placeholder_topic.png)
[/PARAM]
[PARAM:icon]
	![](%ROOT%/platform_icon.png)(convert:false)
[/PARAM]
[PARAM:title]
	%Platforms:title%
[/PARAM]
[PARAM:description]
	%Platforms:description%
[/PARAM]
[PARAM:path]
	[RELATIVE:Platforms]
[/PARAM]
[/VAR]

[VAR:Topic]
[OBJECT:Topic]
%params%
[/OBJECT]
[/VAR]

[VAR:TopicCompact]
[OBJECT:TopicCompact]
%params%
[/OBJECT]
[/VAR]

[VAR:Role]
[OBJECT:Role]
%params%
[PARAMLITERAL:id]
platforms
[/PARAMLITERAL]
[/OBJECT]
[/VAR]

[TOC(start:2)]

ユーザーが最高の VR 体験ができるように、仮想現実 (VR) 向けのコンテンツ開発では 
一部のワークフローを調整する必要があります。このガイドの目的は、VR プロジェクト用のコンテンツの開発にあたり、 
留意しておくべき主要事項のいくつかを分かりやすく説明することが目的です。 

##	VR プロジェクト設定
ベースがブループリントまたは C++ のいずれの場合も、VR 用プロジェクトを新規作成するには、**Scalable 3D または 2D** グラフィクスと **No Starter Content** を使って **[Mobile / Tablet]** オプションを使用したプロジェクトを作成するのがベストです。 
そうすると、VR プロジェクトが起動直後にフレームで確実に実行されます。 

![](VR_Project_Settings.png)

## VR .INI 設定

以下の .INI 設定は、UE4 が搭載された VR デモの Showdown のものです。 
これらの .INI 設定を使用する場合は、プロジェクト **「Config\DefaultEngine.INI」** ファイルの **[SystemSettings]** に追加しなければなりません。 

	[SystemSettings]
	r.VolumeMultiplier=1.0
	r.screenpercentage=130
	r.SeparateTranslucency=0
	r.HZBOcclusion=0
	r.MotionBlurQuality=0
	r.PostProcessAAQuality=3
	r.BloomQuality=1
	r.EyeAdaptationQuality=0
	r.AmbientOcclusionLevels=0
	r.SSR.Quality=1
	r.DepthOfFieldQuality=0
	r.SceneColorFormat=2
	r.SSSSS=0
	r.TranslucencyVolumeBlur=0
	r.TranslucencyLightingVolumeDim=4
	r.MaxAnisotropy=8
	r.LensFlareQuality=0
	r.SceneColorFringeQuality=0
	r.FastBlurThreshold=0
	r.SSR.MaxRoughness=0.1
	r.rhicmdbypass=0
	r.TiledReflectionEnvironmentMinimumCount=10
	sg.EffectsQuality=2
	sg.PostProcessQuality=0

## VR Instanced Stereo

UE 4.11 のリリースでは、VR のパフォーマンスに対する影響を緩和するために Instanced Stereo レンダリングが実装されました。 
この機能は、**[Edit (編集)] -> [Project Settings (プロジェクト設定)] -> [Rendering (レンダリング)] -> VR** の [Instanced Stereo] オプションにチェックを入れて有効にします。 

![](VR_ISR.png)

**Instanced Stereo** レンダリングを有効にした後、エンジンを再起動し、シェーダーを再コンパイルする必要があります。
 ベース パスと Early-Z パス (両方ともシリアルおよび並列レンダリング パス) は、機能が有効にされると、スタティック メッシュ、スケルタル メッシュ、スプライト パーティクル、メッシュ パーティクルで機能します。 
 現在、**Instanced Stereo** は PC (DirectX) と PS4 で機能します。それ以外のプラットフォームのサポートは 4.11 初回リリースの後になります。 
 以下のビデオで、VR での Standard Stereo レンダリングと VR での Instanced Stereo レンダリングを紹介しています。 

[OBJECT:EmbeddedVideo]
	[PARAMLITERAL:width]
	640
	[/PARAMLITERAL]
	[PARAMLITERAL:height]
	360
	[/PARAMLITERAL]
	[PARAMLITERAL:videoid]
	nmajnglJeyE
	[/PARAMLITERAL]
[/OBJECT]

### モバイルで VR マルチビューをサポート

(サポート対象の) モバイル デバイスのいくつかで、VR マルチウィンドウがサポートされました。モバイル マルチビューはデスクトップ PC で使用できる Instanced Stereo レンダリングと似ており、ステレオ レンダリング用に最適化したパスをモバイル デバイスの CPU 上に提供して機能します。この機能を有効にするには、以下の手順を行います。

[region:warning]
この機能は実験的なので、最新のメール ベースの GPU でのみ動作します。整備が整い、オンラインでより多くのモバイルをサポートするようになると、この警告は出なくなります。
[/region]

1. メイン ツールバー から **[Edit (編集)]** > **[Project Settings (プロジェクト設定)] を選んで、エディタのプロジェクト設定を開きます。

1. 次に、**[Engine]** > **[Rendering]** > **[VR]** を開き、**[Mobile Multi-View (実験的)]** オプションを探します。 

1. [Mobile Multi-View (実験的)] オプションは、名前の横のチェックボックスにチェックを入れると有効になるので、その後で再起動して変更を反映させます。

    ![](VR_MobileMultiView.png)

この機能を使うためには、Android のビルド設定を以下のようにする必要があります。

* **[Android]** > **[Build]** セクションで **[Support OpenGL ES2]** が有効になっていることを 確認してください。 
* **[Mobile HDR]** と **[Instanced Stereo Rendering]** が無効になっているか確認してください。
* 現時点では、Mobile Multiview は最新のメール ベースの GPU でのみ動作します。 
* 互換性のある GPU を搭載せずに本機能でプロジェクトをパッケージ化した場合、ランタイムに無効になります。 

## VR パフォーマンスのプロファイル

VR には負荷が大きすぎるアセットを追跡するには、プロジェクトのライフタイムを通じて可能な限り、CPU と GPU 上でプロジェクトが何をしているのかをプロファイルする必要があります。 

* **GPU Profiling** - プロジェクトの実行中に **CTRL + SHIFT + , (カンマ キー)** を一緒に押すと、GPU プロファイラを有効にすることができます。キーを押すと、新規ウィンドウが開いて以下の画像のようになります。 
	![](VR_GPU_Profiler.png)

* **CPU Profiler** - CPU 上のプロジェクトの動作分析は、GPU のプロファイルよりも若干複雑になります。この方法についての詳細については、[パフォーマンス プロファイラ](https://docs.unrealengine.com/latest/INT/Engine/Performance/Profiler/index.html) をご覧ください。 

## VR 前方レンダリング

![](Engine\Performance\ForwardRenderer\ForwardRenderingBanner.png)(w:840)

[INCLUDE:Engine\Performance\ForwardRenderer#intro]

[REGION:note]
詳細は [](Engine\Performance\ForwardRenderer) のドキュメントをご覧ください。 
[/REGION]

## VR ポストプロセス設定

VR のレンダリング要件は厳しいので、デフォルトで有効設定にされているほとんどの高度なポスト プロセス機能は無効にしておかないと、
 プロジェクトのパフォーマンスに問題が生じる可能性があります。プロジェクトで無効にするには、以下の手順に従います。

 1. Post Process(PP) ボリュームがレベルにない場合は、レベルに追加します。
 1. PP ボリュームを選択し、**[Post Process Volume]** セクションで **[Unbound (境界なし)]** オプションを有効にして、PP ボリュームの設定がレベル全体に適用されるようにします。 

	![](VR_PP_Unbound.png)

 1. **[Post Process Volume]** の **[Settings (設定)]** を展開して、各セクションをクリックしてプロパティを有効にして、デフォルト値に値を設定します。デフォルト値 (通常 1.0) を **0** にすれば、この機能は無効になります。

	![](VR_Disable_PP_Settings.png)
	[region:note]
	この操作をする場合、セクションすべてを開いてプロパティを 0 にする必要はありません。その変わりに、レンズフレア、スクリーン スペース反射、テンポラル アンチエイリアシング、SSAO、ブルームなどの非常に重たい機能や、パフォーマンスに影響を与える機能を最初に無効にします。
	[/region]

## VR ワールドのスケーリング

VR プラットフォームで可能な限り最高のユーザー体験を提供するためには、 
ワールドのスケーリングは必ず正確に行うことが最も重要です。正確なスケーリングを怠ると、ユーザーに感覚的な様々な問題を感じさせ、 
シミュレーション酔いをさせてしまう可能性もあります。オブジェクトは、プレイヤーのカメラから **0.75 から 3.5 メートル (m)** の範囲が一番見やすくなります。 
UE4 内では、**1 アンリアル ユニット (UU) は 1 センチ (cm) と等しくなっています**。つまり、アンリアル内にあるオブジェクトは、 
プレイヤーのカメラ (VR 使用時) から **75 UU から 350 UU** 離れた位置にある時が最も見やすいということです。 
 
| 距離  | アンリアル ユニット(UU) での距離 |
| --- | --- |
| 1 センチ (cm) | 1 アンリアル ユニット|
| 1 メーター|100 アンリアル ユニット|
| 1 キロメーター | 100,000 アンリアル ユニット|

UE4 内の **[World Settings (ワールド設定)]** にある **World to Meters** 変数でワールドのスケールを調整することができます。
この数字を増減すると、周りのワールドとの関係でユーザーは自分が大きく、あるいは小さく感じます。 
仮にコンテンツが 1 アンリアル ユニット = 1 CM でビルドされている場合、**[World To Meters]** を **「10」** に設定するとワールドが非常に大きくなります。 
逆に **World To Meters** を **1000** に設定すると、ワールドは非常に小さくなります。

![](T_VR_World_To_Meters_00.png)

## VR とシミュレーション酔い

シミュレーション酔いとは、VR ワールドで HMD デバイスを使用する際に生じる乗り物酔いの一種です。シミュレーション酔いがユーザーの VR 体験に与える打撃はかなり大きく、 
せっかくの VR 体験を台無しにしてしまう事もあります。ユーザーに辛い VR 体験をさせないためにも、 
以下のベストプラクティスを **遵守** してください。でないと、 
ユーザーに非常に不快な VR 体験をさせてしまう可能性があります。    

* HMD のネイティブ フレームレートを常に上回るようにするために、フレームレート、そして欲を言えばバッファを少し維持しなければなりません。
フレームレートが低くてもシミュレーション酔いの原因になってしまうため、出来る限りゲームを最適化してください。 
以下の表は、各種 HMD の UE4 のサポートとこれらのデバイス上での実行に VR プロジェクトが必要とするターゲット フレーム レートです。
| HMD デバイス  | ターゲット フレーム レート |
| --- | --- |
| DK1 | 60 FPS|
| DK2 | 75 FPS|
| Rift Retail | 90 FPS|
| Vive | 90 FPS|
| Gear VR | 60 FPS|
| PSVR | 最高 120 FPS まで変動|

* 開発者は VR デバイスの使用に慣れすぎているため、テスト対象者には最も不適切です。シミュレーション酔いの発生を防ぐためにも、テスト対象者はできるだけ幅広いタイプから選んでゲームをチェックしてください。
* シネマティクス カメラ、あるいはプレイヤーがカメラ移動を制御できなくするカメラは、ユーザーが最悪の VR 体験をする元凶になりやすいため、使用は避けてください。
* 視野角 (FOV) を手動でオーバーライトしないでください。また、エンド ユーザーに編集目的で視野角を公開しないでください。値はヘッドセットとレンズの物理ジオメトリと一致していなければなりません。これはデバイスの SDK と内部コンフィギュレーションにより自動的に設定されます。不整合があれば、頭を回転させたときにワールドが歪んでいるように見えて、不快感や吐き気につながります。 
* カメラ効果に "Walking Bob" を使用しないでください (ファーストパーソンゲームでよくあります)。人の動きを真似するためにカメラを上下すると、プレイヤーにシミュレーション酔いを起させて、VR 体験を台無しにしてしまいます。 
* イベントをプレイヤーに伝えようとするときにカメラを揺らさないでください。手榴弾がプレイヤーの横で爆発した時、VR 以外のゲームではカメラが揺れるのは自然に思いますが、VR ゲームの場合はすぐにシミュレーション酔いを起こします。
* VR ゲーム用にワールドとレベルを設計している場合、通常よりも暗いライトとカラーを使用するようにしてください。VR ゲームで強く鮮やかなライティングを使用すると、シミュレーション酔いが速く起こってしまう可能性があります。通常よりも落ち着いた描画や暗いライトを使用することで、こうした状況を回避します。
* 階段は避けて代わりにエレベーターを使ってください。プレイヤーが素早く移動すると、特に階段の上り下りの場合、方向感覚を失いやすくなります。
* プレイヤーは、徐々にフルスピードにするのではなく、一気にフルスピードにします。さらに、移動速度への加速は常に一定でなくてはなりません。 
* 被写界深度あるいはモーション ブラー ポストプロセスは使用しないでください。ユーザーが見ているものへの影響が大きく、さらに重要なのは、ユーザーにシミュレーション酔いをさせてしまうからです。 

これはシミュレーション酔いの根本的原因の徹底調査結果ではありませんが、VR ゲームのプレイ中にプレイヤーの具合が悪くなる原因についての良いヒントになるはずです。

## VR カメラの設定
UE4 で VR カメラを設定する場合、VR 体験を立って行うか、座って行うかによって全く異なります。
座って行う体験の場合、カメラの基点をキャラクターが立っている状態まで人為的に高くする必要があります。 
ただしこの場合、カメラの原点が 0 (グラウンド上) になるようにしてください。 
そのためには、キャラクターのベースでカメラ コンポーネントをシーン コンポーネントにアタッチするか、 
Eye Height (目の位置) をキャラクター上のコリジョン カプセルの (マイナスの) Cylinder Height (シリンダーの高さ) の半分に設定します。

## VR キャラクター設定

VR ヘッドセットを使用したキャラクターのセットアップは、標準のキャラクターのセットアップとは若干異なります。例えば、キャラクターの 
高さ、幅、速度、カメラ位置、これらはすべて VR キャラクターに合わせて若干の修正が必要となります。   

[REGION:tip]
 VR ワールドからオブジェクトをビルドする場合、 
 デジタル オブジェクトのスケールを現実世界のオブジェクトと同じにすることが重要です。現実世界にある時のサイズより大きくしたり小さくすると、 
 達成できるはずの没入感を台無しにしてしまうことがあります。 
[/REGION]
 
 **キャラクターの高さと幅**

キャラクターの高さと幅は、可能な限り現実世界の寸法と同じにします。サイズは大きすぎても小さすぎても 
実現しようとしている没入感を台無しにしてしまう可能性があります。  

|プロパティ| UE4 デフォルト | 推奨 VR |
|---| --- | --- |
|Height:| 192 cm|176 cm|
|Width:| 84 cm|68 cm|

**移動速度**

VR の移動速度は設定の推奨が難しいです。 
なぜなら、達成しようとする体験のタイプによって異なるからです。例えば、Elemental VR デモでは、 
移動速度を通常の約 1/4 にしています。  

|プロパティ| UE4 デフォルト | 推奨 VR |
|---| --- | --- |
Movement Speed:|60 m/s|24 m/s|

**カメラ位置**

VR カメラは基本的な目の高さよりも若干低めに配置して、キャラクターの目の高さになるように補正する必要があります。  

|プロパティ| UE4 デフォルト | 推奨 VR |
|---| --- | --- |
Base Eye Height:|180 cm|160 cm|



## VR コンテンツに対する配慮

VR コンテンツを制作する場合には、ユーザーは複数の角度からコンテンツを見ていることを忘れないでください。今まで問題なく行ったことであっても、 
VR の場合は以下のように回避すべきことがあります。

* **Scale** - VR ワールドのオブジェクトをスケールする場合は、実寸をできるだけ真似るのが最善の方法です。 
現実世界よりもオブジェクトを大きくしたり、小さくしたりすると、混乱を招き、シミュレーション酔いにつながることがあります。

* **Missing Polygon Faces** - 標準的なゲームでは、ポリゴン面をプレイヤーには見えないオブジェクトから削除することができます (そうした方がよいです)。 
しかし、VR ゲームではプレイヤーは周囲を見渡す自由度が高くなっており、この方法ではプレイヤーは見えないはずのものが見えてしまう結果になる場合があります。

* ** Which Type of Lighting to use** - VR プロジェクトの作成には、レンダリング負荷が最も低い **Static lighting (静的ライト)** と **ライトマップ** を常に使います。 
動的ライティングを使う必要がある場合は、動的ライト数を可能な限り少なくして、お互いに触れ合うことのないようにしてください。 
屋外のシーンがある場合は、指向性ライトを Stationary light (固定ライト) ではなく動的に設定して、Cascaded Shadow Maps(CSM); を有効にしておくと、最もシンプルな設定でシャドウを付けることができます。 

* ** VR と VFX** - [SubUV テクスチャ](https://docs.unrealengine.com/latest/INT/Engine/Rendering/ParticleSystems/Reference/Modules/SubUV/index.html) による炎や煙のシミュレーションなどのトリックは、VR ではうまく反映されません。 
ほとんどのケースにおいて、爆発や煙のトレイルなどの VFX のシミュレーションには 2D パーティクルではなくスタティック メッシュを使います。  
近距離フィールド エフェクトあるいはカメラに近いエフェクトは VR できれいに出ますが、これはエフェクトがスタティック メッシュ パーティクルで作成されている場合に限ります。

* **VR と Transparency** - 透過処理は一般的に、何も変更がないことを確認するために各フレームを再評価する必要があるため、3D グラフィクスでのレンダリング透過処理は非常に負荷が高くなります。 
この再評価のために、VR のレンダリング透過処理は負荷があまりに大きすぎて、本来の長所を潰してしまいます。 
ただし、**DitherTemporalAA** マテリアル関数を使えばこの問題を回避することができます。 
このマテリアル関数は、マテリアルが透過処理を使っているかのように見せることができますし、セルフ ソートなど一般的な透過処理の回避も可能です。

	![](VR_Dither_Trans_AA.png)

* **Fake everything you can (できる限り真似をする)** - 動的シャドウ、ライティングなど、負荷の大きいレンダリング オプションを再生成する小技を頭に入れておくと、VR で望みのパフォーマンスを達成しやすくなります。 
Showdown では、キャラクターに動的シャドウをキャストさせると各フレームの負荷が大きすぎることが判明したので割愛しました。 
すると今度は、キャラクターが移動中に宙に浮いているように見えてしまいました。 
そこで、偽の BLOB シャドウを導入して修正すると、位置と強度を大幅に調整することができました。 
これにより、キャラクターがグラウンドや他のオブジェクトに近づくと、シャドウをキャストしているように簡単に見せることができるようになりました。

	[region:lightbox]
	[![](VR_Fake_Shadow_Material.png)](VR_Fake_Shadow_Material.png)
	[/region]

	[region:caption]
	クリックしてフルサイズで表示
	[/region]

## VR ブループリント関数
 
 ブループリント エディタには、VR ヘッドセットとモーション コントローラとインタラクトするために使用できるブループリント ノードが豊富にあります。 
 以下は、各ノードの名前と機能の説明です。

### ヘッドマウント ディスプレイのブループリント ノード

![](VR_HMD_BP_Nodes.png)
|ブループリント ノード名| 機能 | 
|---| --- |
Enable HMD|HMD ステレオ レンダリングの使用の切り替えをします。|
Enable Low Persistence Mode|Low persistence モードと Full persistence モードを切り替えます。|
Get Orientation And Position|HMD の現在の方向と位置を取得します。|
Get Positional Tracking Camera Parameters|HMD にポジション トラッキング カメラが付いている場合、カメラのゲーム ワールド位置を返すと同時に、トラッキング カメラの境界範囲のパラメータでもあります。これにより、ゲーム内で正しいポジション トラッキング範囲を表示することができます。カメラが利用できない、あるいは HMD がサポートしていない場合、すべての値はゼロになります。|
Get Screen Percentage|VR モードで使用する画面比率を返します。|
Get World to Meters Scale|ワールドをマスター スケールに戻すことで、プレイヤーが感じるワールドのスケールに一致させます。|
Has Valid Tracking Position| HMD がポジション トラッキングをサポートする場合、現在トラッキングされているかどうかを示します。|
Is Head Mounted Display Enabled|ヘッドマウント ディスプレイを現在使用しているかどうかを返します。|
Is In Low Persistence Mode | HMD が、Low persistence モードの場合、_true_ を戻します。そうでない場合は、_false_ を戻します。|
Reset Orientation And Position| 現在のヨーが前方方向で、現在のポジションがゼロポイント (ポジション トラッキング用) であると想定して、ロール (進行軸回転) とピッチ (上下動) を 0 に設定します。|
Set Clipping Planes| 遠近のクリッピング平面 (NCP と FCP それぞれ) のステレオ レンダリングを設定します。'stereo ncp = fcp' コンソール コマンドと似ていますが、このコマンドで設定した NCP and FCP は .INI ファイルには保存されません。|
Set World to Meters Scale| ワールドをマスター スケールに設定することで、ワールドのスケールをプレイヤーが感じるワールドのスケールに変更します。|

### Steam VR ブループリント ノード

![](VR_Steam_VR_BP.png)
|ブループリント ノード名| 機能 | 
|---| --- |
|Get Hand Position and Orientation| コントローラ インデックスと手がある場合、コントローラの位置と方向を返します。|
|Get Tracked Device Position and Orientation|HMD の現在の方向と位置を取得します。|
|Get Tracking Space| 追跡中の空間 (座っている、立っているなど) を取得することにより、基本の位置を決定します。|
|Get Valid Tracked Device Ids (有効な追跡デバイス ID を取得)| 現在追跡されているデバイス ID の配列を返します。|
|Set Tracking Space| 追跡空間 (座っている、立っているなど) を設定することにより、変更します。追跡位置をどの空間に返すのかを変更します。|

## VR に関する既知の問題

HMD 機能が原因で、ビデオ ゲーム開発には必須だったアート技術にあった影響がなくなってしまいました。 
以下は、VR では期待どおりに動かない機能、およびそれに対する回避策です。 

|既知の問題| 回避策 | 
|---| --- |
| Screen Space Reflections(SSR) (スクリーン スペース反射)|SSR は VR で機能しますが、生成される反射をワールド内の反射と一致させる上で問題が発生する可能性があります。負荷がかなり小さく、反射アライメントの問題も減るため、SSR ではなく [反射プローブ](Resources/Showcases/Reflections#反射背景) を使います。|

**法線マッピングの問題**

VR でオブジェクト上の法線マップを見ると、これまでのような効果がなくなっていることがわかります。 
法線マップが両眼表示や運動視差を考慮していないためです。 
このため、法線マップは VR デバイスを通してみるとフラットに見えます。 
ただしこれは、法線マップを使用する必要がないという意味ではありません。 
法線マップにしようとしているデータをジオメトリで作成すべきかどうかを、しっかり評価する必要があるという意味です。 
以下は、法線マップの代わりに使用することができる技術です。 

|形状タイプ|説明|
|---|---|
|[視差マッピング](http://en.wikipedia.org/wiki/Parallax_mapping)| 視差マッピングは、法線マッピングでは考慮しないデプスキューを考慮することで法線マッピングを次のレベルに高めます。視差マッピング シェーダーは、オブジェクトを実際よりも詳細に表示して、深さ情報を詳しく表示できます。これは、どのアングルから見ても、その視点からの正確な深度情報を表示するように視差マップが常に補正しているからです。視差マップは、敷石道や表面の細部などの使用に最適です。 

