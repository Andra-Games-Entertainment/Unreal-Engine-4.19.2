// %BANNER_BEGIN%
// ---------------------------------------------------------------------
// %COPYRIGHT_BEGIN%
//
// Copyright (c) 2017 Magic Leap, Inc. (COMPANY) All Rights Reserved.
// Magic Leap, Inc. Confidential and Proprietary
//
// NOTICE:  All information contained herein is, and remains the property
// of COMPANY. The intellectual and technical concepts contained herein
// are proprietary to COMPANY and may be covered by U.S. and Foreign
// Patents, patents in process, and are protected by trade secret or
// copyright law.  Dissemination of this information or reproduction of
// this material is strictly forbidden unless prior written permission is
// obtained from COMPANY.  Access to the source code contained herein is
// hereby forbidden to anyone except current COMPANY employees, managers
// or contractors who have executed Confidentiality and Non-disclosure
// agreements explicitly covering such access.
//
// The copyright notice above does not evidence any actual or intended
// publication or disclosure  of  this source code, which includes
// information that is confidential and/or proprietary, and is a trade
// secret, of  COMPANY.   ANY REPRODUCTION, MODIFICATION, DISTRIBUTION,
// PUBLIC  PERFORMANCE, OR PUBLIC DISPLAY OF OR THROUGH USE  OF THIS
// SOURCE CODE  WITHOUT THE EXPRESS WRITTEN CONSENT OF COMPANY IS
// STRICTLY PROHIBITED, AND IN VIOLATION OF APPLICABLE LAWS AND
// INTERNATIONAL TREATIES.  THE RECEIPT OR POSSESSION OF  THIS SOURCE
// CODE AND/OR RELATED INFORMATION DOES NOT CONVEY OR IMPLY ANY RIGHTS
// TO REPRODUCE, DISCLOSE OR DISTRIBUTE ITS CONTENTS, OR TO MANUFACTURE,
// USE, OR SELL ANYTHING THAT IT  MAY DESCRIBE, IN WHOLE OR IN PART.
//
// %COPYRIGHT_END%
// --------------------------------------------------------------------*/
// %BANNER_END%

#pragma once

#include "CoreTypes.h"
#include "CoreGlobals.h"
#include "IMediaTextureSample.h"
#include "Math/IntPoint.h"
#include "Math/Range.h"
#include "MediaObjectPool.h"
#include "Misc/Timespan.h"
#include "RHI.h"
#include "RHIUtilities.h"
#include "Templates/SharedPointer.h"

/**
 * Texture sample generated by MagicLeapMedia player.
 */
class FMagicLeapMediaTextureSample : public IMediaTextureSample, public IMediaPoolable
{
public:

	/** Default constructor. */
	FMagicLeapMediaTextureSample()
		: Buffer(nullptr)
		, BufferSize(0)
		, Dim(FIntPoint::ZeroValue)
		, Duration(FTimespan::Zero())
		, Time(FTimespan::Zero())
		, ScaleRotation(FLinearColor(1.0f, 0.0f, 0.0f, 1.0f))
		, Offset(FLinearColor(0.0f, 0.0f, 0.0f, 0.0f))
	{
	}

	/** Virtual destructor. */
	virtual ~FMagicLeapMediaTextureSample()
	{
		if (BufferSize > 0)
		{
			FMemory::Free(Buffer);
		}
	}

public:

	/**
	 * Get a writable pointer to the sample buffer.
	 *
	 * @return Sample buffer.
	 */
	void* GetMutableBuffer()
	{
		return Buffer;
	}

	/**
	 * Initialize the sample.
	 *
	 * @param InDim The sample buffer's width and height (in pixels).
	 * @param InDuration The duration for which the sample is valid.
	 * @return true on success, false otherwise.
	 */
	bool Initialize(const FIntPoint& InDim, FTimespan InDuration)
	{
		if (InDim.GetMin() <= 0)
		{
			return false;
		}

		Dim = InDim;
		Duration = InDuration;

		return true;
	}

	/**
	 * Initialize the sample with a memory buffer.
	 *
	 * @param InTime The sample time (in the player's local clock).
	 * @see InitializeTexture
	 */
	void InitializeBuffer(FTimespan InTime, void* InBuffer, bool bCopy)
	{
		Time = InTime;

		const SIZE_T RequiredBufferSize = Dim.X * Dim.Y * sizeof(int32);

		if (bCopy)
		{
			if (BufferSize < RequiredBufferSize)
			{
				if (BufferSize == 0)
				{
					Buffer = FMemory::Malloc(RequiredBufferSize);
				}
				else
				{
					Buffer = FMemory::Realloc(Buffer, RequiredBufferSize);
				}

				BufferSize = RequiredBufferSize;
			}

			FMemory::Memcpy(Buffer, InBuffer, RequiredBufferSize);
		}
		else
		{
			if (BufferSize > 0)
			{
				FMemory::Free(Buffer);
				BufferSize = 0;
			}

			Buffer = InBuffer;
		}
	}

	/**
	 * Initialize the sample with a texture resource.
	 *
	 * @param InTime The sample time (in the player's local clock).
	 * @return The texture resource object that will hold the sample data.
	 * @note This method must be called on the render thread.
	 * @see InitializeBuffer
	 */
	FRHITexture2D* InitializeTexture(FTimespan InTime)
	{
		check(IsInRenderingThread());

		Time = InTime;

		if (Texture.IsValid() && (Texture->GetSizeXY() == Dim))
		{
			return Texture;
		}

		const uint32 CreateFlags = TexCreate_Dynamic | TexCreate_SRGB;

		TRefCountPtr<FRHITexture2D> DummyTexture2DRHI;
		FRHIResourceCreateInfo CreateInfo;

		RHICreateTargetableShaderResource2D(
			Dim.X,
			Dim.Y,
			PF_B8G8R8A8,
			1,
			CreateFlags,
			TexCreate_RenderTargetable,
			false,
			CreateInfo,
			Texture,
			DummyTexture2DRHI
		);

		return Texture;
	}

	/**
	* Set the sample Scale, Rotation, Offset.
	*
	* @param InScaleRotation The sample scale and rotation transform (2x2).
	* @param InOffset The sample offset.
	*/
	void SetScaleRotationOffset(FVector4& InScaleRotation, FVector4& InOffset)
	{
		ScaleRotation = FLinearColor(InScaleRotation.X, InScaleRotation.Y, InScaleRotation.Z, InScaleRotation.W);
		Offset = FLinearColor(InOffset.X, InOffset.Y, InOffset.Z, InOffset.W);
	}

public:

	//~ IMediaTextureSample interface

	virtual const void* GetBuffer() override
	{
		return Buffer;
	}

	virtual FIntPoint GetDim() const override
	{
		return Dim;
	}

	virtual FTimespan GetDuration() const override
	{
		return Duration;
	}

	virtual EMediaTextureSampleFormat GetFormat() const override
	{
		return EMediaTextureSampleFormat::CharBGRA;
	}

	virtual FIntPoint GetOutputDim() const override
	{
		return Dim;
	}

	virtual uint32 GetStride() const override
	{
		return Dim.X * sizeof(int32);
	}

#if WITH_ENGINE

	virtual FRHITexture* GetTexture() const override
	{
		return Texture.GetReference();
	}

#endif //WITH_ENGINE

	virtual FTimespan GetTime() const override
	{
		return Time;
	}

	virtual bool IsCacheable() const override
	{
#if WITH_ENGINE
		return true;
#else
		return false;
#endif
	}

	virtual bool IsOutputSrgb() const override
	{
		return true;
	}

	virtual FLinearColor GetScaleRotation() const override
	{
		return ScaleRotation;
	}

	virtual FLinearColor GetOffset() const override
	{
		return Offset;
	}

private:

	/** The sample's data buffer. */
	void* Buffer;

	/** Current allocation size of Buffer. */
	SIZE_T BufferSize;

	/** Width and height of the texture sample. */
	FIntPoint Dim;

	/** Duration for which the sample is valid. */
	FTimespan Duration;

	/** Sample time. */
	FTimespan Time;

	/** ScaleRotation for the sample. */
	FLinearColor ScaleRotation;

	/** Offset for the sample. */
	FLinearColor Offset;

#if WITH_ENGINE

	/** Texture resource. */
	TRefCountPtr<FRHITexture2D> Texture;

#endif //WITH_ENGINE
};


/** Implements a pool for MagicLeap texture sample objects. */
class FMagicLeapMediaTextureSamplePool : public TMediaObjectPool<FMagicLeapMediaTextureSample> { };
