// Copyright 1998-2017 Epic Games, Inc. All Rights Reserved.
/*=============================================================================
	DistortApplyScreenPixelShader.usf: Pixel shader for rendering screen distortion pass
=============================================================================*/

#include "Common.ush"

static const half InvDistortionScaleBias = 1 / 4.0f;

/** 
 * contains accumulated distortion values as 
 * R=positive horizontal offset
 * G=positive vertical offset
 * B=negative horizontal offset
 * A=negative vertical offset 
 */

  
 #if USE_MSAA
Texture2DMS<float4> DistortionMSAATexture;
Texture2DMS<float4> SceneColorMSAATexture;
#else
Texture2D		DistortionTexture;
SamplerState	DistortionTextureSampler;
#endif

/**
 * Contains the valid region in the scenecolor texture (in UV space).
 * Trying to sample outside this region will yield garbage colors.
 * X,Y = Upper-left corner
 * Z,W = Lower-left corner
 */
float4		SceneColorRect;

/** distorts screen texture using accumulated distortion offsets */
void Main(
	in noperspective float4 TexCoord: TEXCOORD0,
	out float4 OutColor : SV_Target0
#if USE_MSAA
	, in uint SampleIndex : SV_SampleIndex
#endif
	)
{
	// sample accumulated distortion and apply inverse scale
#if USE_MSAA
	half4 AccumDist = DistortionMSAATexture.Load(int2(TexCoord.xy * View.BufferSizeAndInvSize.xy), SampleIndex);
#else
	half4 AccumDist = Texture2DSample(DistortionTexture,DistortionTextureSampler,TexCoord.xy);
#endif

	// apply inverse scale
	// offset = [R-B,G-A] 
	half2 DistOffset = (AccumDist.rg - AccumDist.ba);
	//Scale by the screen size and a fudge factor to come close to the offset values we would have had under normal circumstances before my changes. Also flip Y and invert the precision bias scale.
	DistOffset *= InvDistortionScaleBias;
	
	
	float2 NewTexCoord = TexCoord.xy + DistOffset;

	// If we're about to sample outside the valid SceneColorRect, set to 0 distortion.
	FLATTEN if ( NewTexCoord.x < SceneColorRect.x || NewTexCoord.x > SceneColorRect.z ||
				 NewTexCoord.y < SceneColorRect.y || NewTexCoord.y > SceneColorRect.w )
	{
		NewTexCoord = TexCoord.xy;
	}

	// sample screen using offset coords
#if USE_MSAA
	OutColor = SceneColorMSAATexture.Load(int2(NewTexCoord * View.BufferSizeAndInvSize.xy), SampleIndex);
#else
	OutColor = Texture2DSample(SceneColorTexture, SceneColorTextureSampler, NewTexCoord);
#endif
}

void Merge(
	in noperspective float4 TexCoord: TEXCOORD0,
	out float4 OutColor : SV_Target0
#if USE_MSAA
	, in uint SampleIndex : SV_SampleIndex
#endif
	)
{
#if USE_MSAA
	OutColor = SceneColorMSAATexture.Load(int2(View.BufferSizeAndInvSize.xy * TexCoord.xy), SampleIndex);
#else
	OutColor = Texture2DSample(SceneColorTexture, SceneColorTextureSampler, TexCoord.xy);
#endif
}


