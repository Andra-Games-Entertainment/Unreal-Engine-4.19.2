// Copyright 1998-2018 Epic Games, Inc. All Rights Reserved.

/*=============================================================================
	DiaphragmDOF/DOFSetup.usf: Diaphragm DOF's setup shader. 
=============================================================================*/

#include "DOFDownsample.ush"


//------------------------------------------------------- COMPILE TIME CONSTANTS

#if DIM_OUTPUT_RES_DIVISOR == 0
	#define GROUP_BORDER_SIZE (2 * DEFAULT_GROUP_BORDER_SIZE)
#else
	#define GROUP_BORDER_SIZE (DEFAULT_GROUP_BORDER_SIZE)
#endif


//------------------------------------------------------- PARAMETERS

float4 CocModelParameters;

// x: full res basis; y: half res basis.
float2 CocRadiusBasis;


//------------------------------------------------------- OUTPUTS

RWTexture2D<float4>	Output0;
RWTexture2D<float4>	Output1;


//------------------------------------------------------- LDS

#define SUBTILE_SIZE (DEFAULT_GROUP_BORDER_SIZE)

groupshared float4 SharedColorAndCocRadius[SUBTILE_SIZE * SUBTILE_SIZE * 3];


//------------------------------------------------------- ENTRY POINT

#if DIM_OUTPUT_RES_DIVISOR == 0 // Output full & half resolution.

[numthreads(GROUP_BORDER_SIZE, GROUP_BORDER_SIZE, 1)]
void SetupCS(
	uint2 GroupId : SV_GroupID,
	uint GroupThreadIndex : SV_GroupIndex)
{
	uint2 SubGroupId = uint2((GroupThreadIndex & 64) != 0, (GroupThreadIndex & 128) != 0);
	uint2 SubGroupPos = uint2(GroupThreadIndex & 0x7, (GroupThreadIndex / 8) & 0x7);

	bool bIsDownSamplingSubGroup = GroupThreadIndex < SUBTILE_SIZE * SUBTILE_SIZE;
	
	uint2 InputPixelPosition = (uint2(View.ViewRectMin.xy) + GroupId * GROUP_BORDER_SIZE) + SubGroupPos * 2 + SubGroupId;

	// Fetch scene color/depth, and compute CocRadius.
	float2 SceneBufferUV = (InputPixelPosition + 0.5) * View.BufferSizeAndInvSize.zw;
	
	if (true)
	{
		SceneBufferUV = clamp(SceneBufferUV, View.BufferBilinearUVMinMax.xy, View.BufferBilinearUVMinMax.zw);
	}

	float4 SceneColor = PostprocessInput0.SampleLevel(GlobalPointClampedSampler, SceneBufferUV, 0);
	float DeviceZ = PostprocessInput1.SampleLevel(GlobalPointClampedSampler, SceneBufferUV, 0).r;
	float CocRadius = DepthToHalfResCocRadius(CocModelParameters, ConvertFromDeviceZ(DeviceZ));

	// Output full resolution.
	{
		Output0[uint2(InputPixelPosition)] = float4(SceneColor.rgb, CocRadiusBasis.x * CocRadius);
	}

	// Have the auxiliary thread writing to LDS for main group to downscale.
	BRANCH
	if (!bIsDownSamplingSubGroup)
	{
		SharedColorAndCocRadius[GroupThreadIndex - SUBTILE_SIZE * SUBTILE_SIZE] = float4(SceneColor.rgb, CocRadiusBasis.y * CocRadius);
	}

	GroupMemoryBarrierWithGroupSync();

	// Have main threads to downscale.
	BRANCH
	if (bIsDownSamplingSubGroup)
	{
		// fetch from LDS.
		float4 SceneColors[4];
		float CocRadii[4];

		SceneColors[0] = SceneColor;
		CocRadii[0] = CocRadiusBasis.y * CocRadius;

		UNROLL
		for (uint i = 0; i < 3; i++)
		{
			float4 RawLDS = SharedColorAndCocRadius[GroupThreadIndex + SUBTILE_SIZE * SUBTILE_SIZE * i];

			SceneColors[i + 1] = float4(RawLDS.rgb, 0);
			CocRadii[i + 1] = RawLDS.a;
		}

		// Downsample.
		float4 OutColor;
		float OutCocRadius;
		DownsampleSceneColorWithCoc(SceneColors, CocRadii, OutColor, OutCocRadius);
	
		uint2 HalfResOutputPixelPosition = GroupId * (GROUP_BORDER_SIZE / 2) + SubGroupPos;

		// TODO: POST_PROCESS_ALPHA
		//if (all(HalfResOutputPixelPosition < ViewportRect.zw))
		{
			Output1[HalfResOutputPixelPosition] = float4(OutColor.rgb, OutCocRadius);
		}
	}
}


#elif DIM_OUTPUT_RES_DIVISOR == 1 // Output full resolution only.

[numthreads(GROUP_BORDER_SIZE, GROUP_BORDER_SIZE, 1)]
void SetupCS(uint2 DispatchThreadId : SV_DispatchThreadID) 
{
	float2 SceneBufferUV = (float2(View.ViewRectMin.xy) + (DispatchThreadId + 0.5)) * View.BufferSizeAndInvSize.zw;
	
	float4 OutColor = PostprocessInput0.SampleLevel(GlobalPointClampedSampler, SceneBufferUV, 0);

	float DeviceZ = PostprocessInput1.SampleLevel(GlobalPointClampedSampler, SceneBufferUV, 0).r;
	float OutCocRadius = CocRadiusBasis.x * DepthToHalfResCocRadius(CocModelParameters, ConvertFromDeviceZ(DeviceZ));

	if (all(DispatchThreadId < ViewportRect.zw))
	{
		Output0[View.ViewRectMin.xy + DispatchThreadId] = float4(OutColor.xyz, OutCocRadius);
	}
}


#elif DIM_OUTPUT_RES_DIVISOR == 2 // Output half resolution only.

[numthreads(GROUP_BORDER_SIZE, GROUP_BORDER_SIZE, 1)]
void SetupCS(
	uint2 GroupId : SV_GroupID,
	uint2 DispatchThreadId : SV_DispatchThreadID) 
{
	// Compute scene buffer uv, but carefully to handle view size % 2 == 1,
	// because this pass is running at half resolution.
	float2 SceneBufferUV = (float2(View.ViewRectMin.xy) + 2.0 * (DispatchThreadId + 0.5)) * View.BufferSizeAndInvSize.zw;
	float2 SceneBufferUVOffset = View.BufferSizeAndInvSize.zw * 0.5;
	
	BRANCH
	if (all(GroupId * GROUP_BORDER_SIZE + (GROUP_BORDER_SIZE + 1) <= ViewportRect.zw))
	{
		// Fetch Coc
		float4 SceneDepthGather = PostprocessInput1.Gather(GlobalPointClampedSampler, SceneBufferUV);
		float CocRadii[4];
		CocRadii[0] = DepthToHalfResCocRadius(CocModelParameters, ConvertFromDeviceZ(SceneDepthGather.w));
		CocRadii[1] = DepthToHalfResCocRadius(CocModelParameters, ConvertFromDeviceZ(SceneDepthGather.z));
		CocRadii[2] = DepthToHalfResCocRadius(CocModelParameters, ConvertFromDeviceZ(SceneDepthGather.x));
		CocRadii[3] = DepthToHalfResCocRadius(CocModelParameters, ConvertFromDeviceZ(SceneDepthGather.y));

		// Fetch color.
		float4 SceneColors[4];
		for (uint i = 0; i < 4; i++)
		{
			float2 SampleUV = SceneBufferUV + SceneBufferUVOffset * float2(kOffsetsCross3x3[i]);
			SceneColors[i] = PostprocessInput0.SampleLevel(GlobalPointClampedSampler, SampleUV, 0);
		}
	
		// Downsample.
		float4 OutColor;
		float OutCocRadius;
		DownsampleSceneColorWithCoc(SceneColors, CocRadii, OutColor, OutCocRadius);
	
		Output1[DispatchThreadId] = float4(OutColor.xyz, OutCocRadius);
	}
	else
	{
		// Sample scene color and depth.
		float CocRadii[4];
		float4 SceneColors[4];
		for (uint i = 0; i < 4; i++)
		{
			float2 SampleUV = SceneBufferUV + SceneBufferUVOffset * float2(kOffsetsCross3x3[i]);

			if (true)
			{
				SampleUV = clamp(SampleUV, View.BufferBilinearUVMinMax.xy, View.BufferBilinearUVMinMax.zw);
			}

			SceneColors[i] = PostprocessInput0.SampleLevel(GlobalPointClampedSampler, SampleUV, 0);

			float SampleDeviceZ = PostprocessInput1.SampleLevel(GlobalPointClampedSampler, SampleUV, 0).r;
			CocRadii[i] = DepthToHalfResCocRadius(CocModelParameters, ConvertFromDeviceZ(SampleDeviceZ));
		}

		// Downsample.
		float4 OutColor;
		float OutCocRadius;
		DownsampleSceneColorWithCoc(SceneColors, CocRadii, OutColor, OutCocRadius);
	
		#if 0 // Lower VGPR footprint.
			uint2 OutputPixelPosition = 0.5 * SceneBufferUV * View.BufferSizeAndInvSize.xy;
		#else
			uint2 OutputPixelPosition = DispatchThreadId;
		#endif

		// TODO: POST_PROCESS_ALPHA
		if (all(OutputPixelPosition < ViewportRect.zw))
		{
			Output1[OutputPixelPosition] = float4(OutColor.xyz, OutCocRadius);
		}
	}
}


#else
	#error Unkown resolution divisor.
#endif
