// Copyright 1998-2017 Epic Games, Inc. All Rights Reserved.

/*=============================================================================
	HeightFogCommon.usf: 
=============================================================================*/

#ifndef SUPPORT_FOG_INSCATTERING_TEXTURE
#define SUPPORT_FOG_INSCATTERING_TEXTURE (FEATURE_LEVEL >= FEATURE_LEVEL_SM4)
#endif

#ifndef SUPPORT_FOG_DIRECTIONAL_LIGHT_INSCATTERING
#define SUPPORT_FOG_DIRECTIONAL_LIGHT_INSCATTERING 1
#endif

static const float FLT_EPSILON = 0.001f;
static const float FLT_EPSILON2 = 0.01f;

/** FogDensity * exp2(-FogHeightFalloff * (CameraWorldPosition.z - FogHeight)) in x, FogHeightFalloff in y, CosTerminatorAngle in z, StartDistance in w. */
float4 ExponentialFogParameters;
float4 ExponentialFogColorParameter;
/** FogDensity in x, FogHeight in y, whether to use cubemap fog color in z, FogCutoffDistance in w. */
float4 ExponentialFogParameters3;
half4 InscatteringLightDirection;
half4 DirectionalInscatteringColor;
float DirectionalInscatteringStartDistance;

TextureCube FogInscatteringColorCubemap;
SamplerState FogInscatteringColorSampler;
/** mip distance scale in x, bias in y, num mips in z */
float3 FogInscatteringTextureParameters;

// @param WorldPositionRelativeToCamera = WorldPosition - InCameraPosition
half4 GetExponentialHeightFog(float3 WorldPositionRelativeToCamera)
{
	/** Color to use. */
	const half3 ExponentialFogColor = ExponentialFogColorParameter.xyz;
	const half MinFogOpacity = ExponentialFogColorParameter.w;

	float3 CameraToReceiver = WorldPositionRelativeToCamera;
	float CameraToReceiverLengthSqr = dot(CameraToReceiver, CameraToReceiver);
	float CameraToReceiverLengthInv = rsqrt(CameraToReceiverLengthSqr);
	float CameraToReceiverLength = CameraToReceiverLengthSqr * CameraToReceiverLengthInv;
	half3 CameraToReceiverNormalized = CameraToReceiver * CameraToReceiverLengthInv;

	float RayOriginTerms = ExponentialFogParameters.x;
	float RayLength = CameraToReceiverLength;
	float RayDirectionZ = CameraToReceiver.z;

#if USE_GLOBAL_CLIP_PLANE

	BRANCH
	// While rendering a planar reflection with a clip plane, we must compute analytical fog using a camera path starting from the plane, rather than the virtual camera origin
	if (dot(View.GlobalClippingPlane.xyz, 1) > 0.0f)
	{
		float CameraOriginPlaneDistance = dot(View.GlobalClippingPlane, float4(View.WorldCameraOrigin, 1));
		float PlaneIntersectionTime = -CameraOriginPlaneDistance / dot(CameraToReceiver, View.GlobalClippingPlane.xyz);

		// Continue if the reflection plane is between the camera and receiver point
		if (PlaneIntersectionTime > 0 && PlaneIntersectionTime < 1)
		{
			float CameraToPlaneIntersectionZ = PlaneIntersectionTime * CameraToReceiver.z;
			float PlaneIntersectionZ = View.WorldCameraOrigin.z + CameraToPlaneIntersectionZ;
			float PlaneIntersectionToReceiverZ = CameraToReceiver.z - CameraToPlaneIntersectionZ;

			// Calculate fog off of the ray starting from the reflection plane, instead of starting from the camera
			RayLength = (1.0f - PlaneIntersectionTime) * CameraToReceiverLength;
			RayDirectionZ = PlaneIntersectionToReceiverZ;

			float Exponent = max(-127.0f, ExponentialFogParameters.y * (PlaneIntersectionZ - ExponentialFogParameters3.y));
			RayOriginTerms = ExponentialFogParameters3.x * exp2(-Exponent);
		}
	}

#endif

	// Calculate the line integral of the ray from the camera to the receiver position through the fog density function
	// The exponential fog density function is d = GlobalDensity * exp(-HeightFalloff * z)
	float EffectiveZ = (abs(RayDirectionZ) > FLT_EPSILON2) ? RayDirectionZ : FLT_EPSILON2;
	float Falloff = max(-127.0f, ExponentialFogParameters.y * EffectiveZ);	// if it's lower than -127.0, then exp2() goes crazy in OpenGL's GLSL.
	float ExponentialHeightLineIntegralShared = RayOriginTerms * (1.0f - exp2(-Falloff) ) / Falloff;
	float ExponentialHeightLineIntegral = ExponentialHeightLineIntegralShared * max(RayLength - ExponentialFogParameters.w, 0.0f);

	half3 Inscattering = ExponentialFogColor;
	half3 DirectionalInscattering = 0;

#if SUPPORT_FOG_INSCATTERING_TEXTURE
	BRANCH
	if (ExponentialFogParameters3.z > 0)
	{
		float FadeAlpha = saturate(CameraToReceiverLength * FogInscatteringTextureParameters.x + FogInscatteringTextureParameters.y);
		float3 DirectionalColor = TextureCubeSampleLevel(FogInscatteringColorCubemap, FogInscatteringColorSampler, CameraToReceiver, 0).xyz;
		float3 NonDirectionalColor = TextureCubeSampleLevel(FogInscatteringColorCubemap, FogInscatteringColorSampler, CameraToReceiver, FogInscatteringTextureParameters.z).xyz;
		Inscattering *= lerp(NonDirectionalColor, DirectionalColor, FadeAlpha);
	}
#endif

#if SUPPORT_FOG_DIRECTIONAL_LIGHT_INSCATTERING
	if (InscatteringLightDirection.w > 0 && ExponentialFogParameters3.z == 0)
	{
		// Setup a cosine lobe around the light direction to approximate inscattering from the directional light off of the ambient haze;
		half3 DirectionalLightInscattering = DirectionalInscatteringColor.xyz * pow(saturate(dot(CameraToReceiverNormalized, InscatteringLightDirection.xyz)), DirectionalInscatteringColor.w);

		// Calculate the line integral of the eye ray through the haze, using a special starting distance to limit the inscattering to the distance
		float DirExponentialHeightLineIntegral = ExponentialHeightLineIntegralShared * max(RayLength - DirectionalInscatteringStartDistance, 0.0f);
		// Calculate the amount of light that made it through the fog using the transmission equation
		half DirectionalInscatteringFogFactor = saturate(exp2(-DirExponentialHeightLineIntegral));
		// Final inscattering from the light
		DirectionalInscattering = DirectionalLightInscattering * (1 - DirectionalInscatteringFogFactor);
	}
#endif

	// Calculate the amount of light that made it through the fog using the transmission equation
	half ExpFogFactor = max(saturate(exp2(-ExponentialHeightLineIntegral)), MinFogOpacity);

	FLATTEN
	if (ExponentialFogParameters3.w > 0 && CameraToReceiverLength > ExponentialFogParameters3.w)
	{
		ExpFogFactor = 1;
		DirectionalInscattering = 0;
	}

	return half4((Inscattering) * (1 - ExpFogFactor) + DirectionalInscattering, ExpFogFactor);
}

half4 CalculateVertexHeightFog(float3 WorldPositionRelativeToCamera)
{
	return GetExponentialHeightFog(WorldPositionRelativeToCamera);
}

